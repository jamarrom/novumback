
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type cajas_bancosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "cajas_bancos"
  objects: {
    tipos_pagos: tipos_pagosPayload<ExtArgs>
    users: usersPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    cajas_bancos_id: number
    nombre_cuenta: string
    tipo_pago_id: number
    cantidad_actual: number
    user_id: number
    activo: number
  }, ExtArgs["result"]["cajas_bancos"]>
  composites: {}
}

/**
 * Model cajas_bancos
 * 
 */
export type cajas_bancos = runtime.Types.DefaultSelection<cajas_bancosPayload>
export type categoriasPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "categorias"
  objects: {
    egresos_futuros: egresos_futurosPayload<ExtArgs>[]
    ingresos_futuros: ingresos_futurosPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    categoria_id: number
    categoria: string
  }, ExtArgs["result"]["categorias"]>
  composites: {}
}

/**
 * Model categorias
 * 
 */
export type categorias = runtime.Types.DefaultSelection<categoriasPayload>
export type clientesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "clientes"
  objects: {
    users: usersPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    cliente_id: number
    nombre: string
    apellido: string
    puesto: string
    celular: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date
    user_id: number
    activo: number
  }, ExtArgs["result"]["clientes"]>
  composites: {}
}

/**
 * Model clientes
 * 
 */
export type clientes = runtime.Types.DefaultSelection<clientesPayload>
export type egresos_futurosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "egresos_futuros"
  objects: {
    categorias: categoriasPayload<ExtArgs>
    tipos_pagos: tipos_pagosPayload<ExtArgs>
    users: usersPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    egresos_futuros_id: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date
    user_id: number
    activo: boolean
  }, ExtArgs["result"]["egresos_futuros"]>
  composites: {}
}

/**
 * Model egresos_futuros
 * 
 */
export type egresos_futuros = runtime.Types.DefaultSelection<egresos_futurosPayload>
export type ingresos_futurosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ingresos_futuros"
  objects: {
    categorias: categoriasPayload<ExtArgs>
    tipos_pagos: tipos_pagosPayload<ExtArgs>
    users: usersPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    ingresos_futuros_id: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date
    user_id: number
    activo: boolean
  }, ExtArgs["result"]["ingresos_futuros"]>
  composites: {}
}

/**
 * Model ingresos_futuros
 * 
 */
export type ingresos_futuros = runtime.Types.DefaultSelection<ingresos_futurosPayload>
export type tipos_pagosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "tipos_pagos"
  objects: {
    cajas_bancos: cajas_bancosPayload<ExtArgs>[]
    egresos_futuros: egresos_futurosPayload<ExtArgs>[]
    ingresos_futuros: ingresos_futurosPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    tipo_pago_id: number
    tipo_pago: string
  }, ExtArgs["result"]["tipos_pagos"]>
  composites: {}
}

/**
 * Model tipos_pagos
 * 
 */
export type tipos_pagos = runtime.Types.DefaultSelection<tipos_pagosPayload>
export type typesusersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "typesusers"
  objects: {
    users: usersPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    typeuser_id: number
    typeuser: string
  }, ExtArgs["result"]["typesusers"]>
  composites: {}
}

/**
 * Model typesusers
 * 
 */
export type typesusers = runtime.Types.DefaultSelection<typesusersPayload>
export type usersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "users"
  objects: {
    cajas_bancos: cajas_bancosPayload<ExtArgs>[]
    clientes: clientesPayload<ExtArgs>[]
    egresos_futuros: egresos_futurosPayload<ExtArgs>[]
    ingresos_futuros: ingresos_futurosPayload<ExtArgs>[]
    typesusers: typesusersPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    user_id: number
    email: string
    password: string
    typeuser_id: number
    activo: number
  }, ExtArgs["result"]["users"]>
  composites: {}
}

/**
 * Model users
 * 
 */
export type users = runtime.Types.DefaultSelection<usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cajas_bancos
 * const cajas_bancos = await prisma.cajas_bancos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cajas_bancos
   * const cajas_bancos = await prisma.cajas_bancos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cajas_bancos`: Exposes CRUD operations for the **cajas_bancos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cajas_bancos
    * const cajas_bancos = await prisma.cajas_bancos.findMany()
    * ```
    */
  get cajas_bancos(): Prisma.cajas_bancosDelegate<ExtArgs>;

  /**
   * `prisma.categorias`: Exposes CRUD operations for the **categorias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categorias.findMany()
    * ```
    */
  get categorias(): Prisma.categoriasDelegate<ExtArgs>;

  /**
   * `prisma.clientes`: Exposes CRUD operations for the **clientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.clientes.findMany()
    * ```
    */
  get clientes(): Prisma.clientesDelegate<ExtArgs>;

  /**
   * `prisma.egresos_futuros`: Exposes CRUD operations for the **egresos_futuros** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Egresos_futuros
    * const egresos_futuros = await prisma.egresos_futuros.findMany()
    * ```
    */
  get egresos_futuros(): Prisma.egresos_futurosDelegate<ExtArgs>;

  /**
   * `prisma.ingresos_futuros`: Exposes CRUD operations for the **ingresos_futuros** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingresos_futuros
    * const ingresos_futuros = await prisma.ingresos_futuros.findMany()
    * ```
    */
  get ingresos_futuros(): Prisma.ingresos_futurosDelegate<ExtArgs>;

  /**
   * `prisma.tipos_pagos`: Exposes CRUD operations for the **tipos_pagos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tipos_pagos
    * const tipos_pagos = await prisma.tipos_pagos.findMany()
    * ```
    */
  get tipos_pagos(): Prisma.tipos_pagosDelegate<ExtArgs>;

  /**
   * `prisma.typesusers`: Exposes CRUD operations for the **typesusers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Typesusers
    * const typesusers = await prisma.typesusers.findMany()
    * ```
    */
  get typesusers(): Prisma.typesusersDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cajas_bancos: 'cajas_bancos',
    categorias: 'categorias',
    clientes: 'clientes',
    egresos_futuros: 'egresos_futuros',
    ingresos_futuros: 'ingresos_futuros',
    tipos_pagos: 'tipos_pagos',
    typesusers: 'typesusers',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cajas_bancos' | 'categorias' | 'clientes' | 'egresos_futuros' | 'ingresos_futuros' | 'tipos_pagos' | 'typesusers' | 'users'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      cajas_bancos: {
        payload: cajas_bancosPayload<ExtArgs>
        fields: Prisma.cajas_bancosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cajas_bancosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cajas_bancosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload>
          }
          findFirst: {
            args: Prisma.cajas_bancosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cajas_bancosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload>
          }
          findMany: {
            args: Prisma.cajas_bancosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload>[]
          }
          create: {
            args: Prisma.cajas_bancosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload>
          }
          createMany: {
            args: Prisma.cajas_bancosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cajas_bancosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload>
          }
          update: {
            args: Prisma.cajas_bancosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload>
          }
          deleteMany: {
            args: Prisma.cajas_bancosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cajas_bancosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cajas_bancosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<cajas_bancosPayload>
          }
          aggregate: {
            args: Prisma.Cajas_bancosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCajas_bancos>
          }
          groupBy: {
            args: Prisma.cajas_bancosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cajas_bancosGroupByOutputType>[]
          }
          count: {
            args: Prisma.cajas_bancosCountArgs<ExtArgs>,
            result: $Utils.Optional<Cajas_bancosCountAggregateOutputType> | number
          }
        }
      }
      categorias: {
        payload: categoriasPayload<ExtArgs>
        fields: Prisma.categoriasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload>
          }
          findFirst: {
            args: Prisma.categoriasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload>
          }
          findMany: {
            args: Prisma.categoriasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload>[]
          }
          create: {
            args: Prisma.categoriasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload>
          }
          createMany: {
            args: Prisma.categoriasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload>
          }
          update: {
            args: Prisma.categoriasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload>
          }
          deleteMany: {
            args: Prisma.categoriasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<categoriasPayload>
          }
          aggregate: {
            args: Prisma.CategoriasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategorias>
          }
          groupBy: {
            args: Prisma.categoriasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriasGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriasCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriasCountAggregateOutputType> | number
          }
        }
      }
      clientes: {
        payload: clientesPayload<ExtArgs>
        fields: Prisma.clientesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          findFirst: {
            args: Prisma.clientesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          findMany: {
            args: Prisma.clientesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>[]
          }
          create: {
            args: Prisma.clientesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          createMany: {
            args: Prisma.clientesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.clientesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          update: {
            args: Prisma.clientesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          deleteMany: {
            args: Prisma.clientesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.clientesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.clientesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          aggregate: {
            args: Prisma.ClientesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClientes>
          }
          groupBy: {
            args: Prisma.clientesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientesGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientesCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientesCountAggregateOutputType> | number
          }
        }
      }
      egresos_futuros: {
        payload: egresos_futurosPayload<ExtArgs>
        fields: Prisma.egresos_futurosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.egresos_futurosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.egresos_futurosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload>
          }
          findFirst: {
            args: Prisma.egresos_futurosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.egresos_futurosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload>
          }
          findMany: {
            args: Prisma.egresos_futurosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload>[]
          }
          create: {
            args: Prisma.egresos_futurosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload>
          }
          createMany: {
            args: Prisma.egresos_futurosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.egresos_futurosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload>
          }
          update: {
            args: Prisma.egresos_futurosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload>
          }
          deleteMany: {
            args: Prisma.egresos_futurosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.egresos_futurosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.egresos_futurosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<egresos_futurosPayload>
          }
          aggregate: {
            args: Prisma.Egresos_futurosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEgresos_futuros>
          }
          groupBy: {
            args: Prisma.egresos_futurosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Egresos_futurosGroupByOutputType>[]
          }
          count: {
            args: Prisma.egresos_futurosCountArgs<ExtArgs>,
            result: $Utils.Optional<Egresos_futurosCountAggregateOutputType> | number
          }
        }
      }
      ingresos_futuros: {
        payload: ingresos_futurosPayload<ExtArgs>
        fields: Prisma.ingresos_futurosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ingresos_futurosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ingresos_futurosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload>
          }
          findFirst: {
            args: Prisma.ingresos_futurosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ingresos_futurosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload>
          }
          findMany: {
            args: Prisma.ingresos_futurosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload>[]
          }
          create: {
            args: Prisma.ingresos_futurosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload>
          }
          createMany: {
            args: Prisma.ingresos_futurosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ingresos_futurosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload>
          }
          update: {
            args: Prisma.ingresos_futurosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload>
          }
          deleteMany: {
            args: Prisma.ingresos_futurosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ingresos_futurosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ingresos_futurosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ingresos_futurosPayload>
          }
          aggregate: {
            args: Prisma.Ingresos_futurosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIngresos_futuros>
          }
          groupBy: {
            args: Prisma.ingresos_futurosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Ingresos_futurosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ingresos_futurosCountArgs<ExtArgs>,
            result: $Utils.Optional<Ingresos_futurosCountAggregateOutputType> | number
          }
        }
      }
      tipos_pagos: {
        payload: tipos_pagosPayload<ExtArgs>
        fields: Prisma.tipos_pagosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tipos_pagosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tipos_pagosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload>
          }
          findFirst: {
            args: Prisma.tipos_pagosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tipos_pagosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload>
          }
          findMany: {
            args: Prisma.tipos_pagosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload>[]
          }
          create: {
            args: Prisma.tipos_pagosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload>
          }
          createMany: {
            args: Prisma.tipos_pagosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tipos_pagosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload>
          }
          update: {
            args: Prisma.tipos_pagosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload>
          }
          deleteMany: {
            args: Prisma.tipos_pagosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tipos_pagosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tipos_pagosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tipos_pagosPayload>
          }
          aggregate: {
            args: Prisma.Tipos_pagosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTipos_pagos>
          }
          groupBy: {
            args: Prisma.tipos_pagosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Tipos_pagosGroupByOutputType>[]
          }
          count: {
            args: Prisma.tipos_pagosCountArgs<ExtArgs>,
            result: $Utils.Optional<Tipos_pagosCountAggregateOutputType> | number
          }
        }
      }
      typesusers: {
        payload: typesusersPayload<ExtArgs>
        fields: Prisma.typesusersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.typesusersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.typesusersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload>
          }
          findFirst: {
            args: Prisma.typesusersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.typesusersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload>
          }
          findMany: {
            args: Prisma.typesusersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload>[]
          }
          create: {
            args: Prisma.typesusersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload>
          }
          createMany: {
            args: Prisma.typesusersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.typesusersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload>
          }
          update: {
            args: Prisma.typesusersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload>
          }
          deleteMany: {
            args: Prisma.typesusersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.typesusersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.typesusersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<typesusersPayload>
          }
          aggregate: {
            args: Prisma.TypesusersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTypesusers>
          }
          groupBy: {
            args: Prisma.typesusersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TypesusersGroupByOutputType>[]
          }
          count: {
            args: Prisma.typesusersCountArgs<ExtArgs>,
            result: $Utils.Optional<TypesusersCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriasCountOutputType
   */


  export type CategoriasCountOutputType = {
    egresos_futuros: number
    ingresos_futuros: number
  }

  export type CategoriasCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    egresos_futuros?: boolean | CategoriasCountOutputTypeCountEgresos_futurosArgs
    ingresos_futuros?: boolean | CategoriasCountOutputTypeCountIngresos_futurosArgs
  }

  // Custom InputTypes

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriasCountOutputType
     */
    select?: CategoriasCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountEgresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: egresos_futurosWhereInput
  }


  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountIngresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ingresos_futurosWhereInput
  }



  /**
   * Count Type Tipos_pagosCountOutputType
   */


  export type Tipos_pagosCountOutputType = {
    cajas_bancos: number
    egresos_futuros: number
    ingresos_futuros: number
  }

  export type Tipos_pagosCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cajas_bancos?: boolean | Tipos_pagosCountOutputTypeCountCajas_bancosArgs
    egresos_futuros?: boolean | Tipos_pagosCountOutputTypeCountEgresos_futurosArgs
    ingresos_futuros?: boolean | Tipos_pagosCountOutputTypeCountIngresos_futurosArgs
  }

  // Custom InputTypes

  /**
   * Tipos_pagosCountOutputType without action
   */
  export type Tipos_pagosCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipos_pagosCountOutputType
     */
    select?: Tipos_pagosCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Tipos_pagosCountOutputType without action
   */
  export type Tipos_pagosCountOutputTypeCountCajas_bancosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: cajas_bancosWhereInput
  }


  /**
   * Tipos_pagosCountOutputType without action
   */
  export type Tipos_pagosCountOutputTypeCountEgresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: egresos_futurosWhereInput
  }


  /**
   * Tipos_pagosCountOutputType without action
   */
  export type Tipos_pagosCountOutputTypeCountIngresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ingresos_futurosWhereInput
  }



  /**
   * Count Type TypesusersCountOutputType
   */


  export type TypesusersCountOutputType = {
    users: number
  }

  export type TypesusersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | TypesusersCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * TypesusersCountOutputType without action
   */
  export type TypesusersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypesusersCountOutputType
     */
    select?: TypesusersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TypesusersCountOutputType without action
   */
  export type TypesusersCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    cajas_bancos: number
    clientes: number
    egresos_futuros: number
    ingresos_futuros: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cajas_bancos?: boolean | UsersCountOutputTypeCountCajas_bancosArgs
    clientes?: boolean | UsersCountOutputTypeCountClientesArgs
    egresos_futuros?: boolean | UsersCountOutputTypeCountEgresos_futurosArgs
    ingresos_futuros?: boolean | UsersCountOutputTypeCountIngresos_futurosArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCajas_bancosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: cajas_bancosWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: clientesWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountEgresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: egresos_futurosWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountIngresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ingresos_futurosWhereInput
  }



  /**
   * Models
   */

  /**
   * Model cajas_bancos
   */


  export type AggregateCajas_bancos = {
    _count: Cajas_bancosCountAggregateOutputType | null
    _avg: Cajas_bancosAvgAggregateOutputType | null
    _sum: Cajas_bancosSumAggregateOutputType | null
    _min: Cajas_bancosMinAggregateOutputType | null
    _max: Cajas_bancosMaxAggregateOutputType | null
  }

  export type Cajas_bancosAvgAggregateOutputType = {
    cajas_bancos_id: number | null
    tipo_pago_id: number | null
    cantidad_actual: number | null
    user_id: number | null
    activo: number | null
  }

  export type Cajas_bancosSumAggregateOutputType = {
    cajas_bancos_id: number | null
    tipo_pago_id: number | null
    cantidad_actual: number | null
    user_id: number | null
    activo: number | null
  }

  export type Cajas_bancosMinAggregateOutputType = {
    cajas_bancos_id: number | null
    nombre_cuenta: string | null
    tipo_pago_id: number | null
    cantidad_actual: number | null
    user_id: number | null
    activo: number | null
  }

  export type Cajas_bancosMaxAggregateOutputType = {
    cajas_bancos_id: number | null
    nombre_cuenta: string | null
    tipo_pago_id: number | null
    cantidad_actual: number | null
    user_id: number | null
    activo: number | null
  }

  export type Cajas_bancosCountAggregateOutputType = {
    cajas_bancos_id: number
    nombre_cuenta: number
    tipo_pago_id: number
    cantidad_actual: number
    user_id: number
    activo: number
    _all: number
  }


  export type Cajas_bancosAvgAggregateInputType = {
    cajas_bancos_id?: true
    tipo_pago_id?: true
    cantidad_actual?: true
    user_id?: true
    activo?: true
  }

  export type Cajas_bancosSumAggregateInputType = {
    cajas_bancos_id?: true
    tipo_pago_id?: true
    cantidad_actual?: true
    user_id?: true
    activo?: true
  }

  export type Cajas_bancosMinAggregateInputType = {
    cajas_bancos_id?: true
    nombre_cuenta?: true
    tipo_pago_id?: true
    cantidad_actual?: true
    user_id?: true
    activo?: true
  }

  export type Cajas_bancosMaxAggregateInputType = {
    cajas_bancos_id?: true
    nombre_cuenta?: true
    tipo_pago_id?: true
    cantidad_actual?: true
    user_id?: true
    activo?: true
  }

  export type Cajas_bancosCountAggregateInputType = {
    cajas_bancos_id?: true
    nombre_cuenta?: true
    tipo_pago_id?: true
    cantidad_actual?: true
    user_id?: true
    activo?: true
    _all?: true
  }

  export type Cajas_bancosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which cajas_bancos to aggregate.
     */
    where?: cajas_bancosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cajas_bancos to fetch.
     */
    orderBy?: cajas_bancosOrderByWithRelationInput | cajas_bancosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cajas_bancosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cajas_bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cajas_bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cajas_bancos
    **/
    _count?: true | Cajas_bancosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cajas_bancosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cajas_bancosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cajas_bancosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cajas_bancosMaxAggregateInputType
  }

  export type GetCajas_bancosAggregateType<T extends Cajas_bancosAggregateArgs> = {
        [P in keyof T & keyof AggregateCajas_bancos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCajas_bancos[P]>
      : GetScalarType<T[P], AggregateCajas_bancos[P]>
  }




  export type cajas_bancosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: cajas_bancosWhereInput
    orderBy?: cajas_bancosOrderByWithAggregationInput | cajas_bancosOrderByWithAggregationInput[]
    by: Cajas_bancosScalarFieldEnum[] | Cajas_bancosScalarFieldEnum
    having?: cajas_bancosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cajas_bancosCountAggregateInputType | true
    _avg?: Cajas_bancosAvgAggregateInputType
    _sum?: Cajas_bancosSumAggregateInputType
    _min?: Cajas_bancosMinAggregateInputType
    _max?: Cajas_bancosMaxAggregateInputType
  }


  export type Cajas_bancosGroupByOutputType = {
    cajas_bancos_id: number
    nombre_cuenta: string
    tipo_pago_id: number
    cantidad_actual: number
    user_id: number
    activo: number
    _count: Cajas_bancosCountAggregateOutputType | null
    _avg: Cajas_bancosAvgAggregateOutputType | null
    _sum: Cajas_bancosSumAggregateOutputType | null
    _min: Cajas_bancosMinAggregateOutputType | null
    _max: Cajas_bancosMaxAggregateOutputType | null
  }

  type GetCajas_bancosGroupByPayload<T extends cajas_bancosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cajas_bancosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cajas_bancosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cajas_bancosGroupByOutputType[P]>
            : GetScalarType<T[P], Cajas_bancosGroupByOutputType[P]>
        }
      >
    >


  export type cajas_bancosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cajas_bancos_id?: boolean
    nombre_cuenta?: boolean
    tipo_pago_id?: boolean
    cantidad_actual?: boolean
    user_id?: boolean
    activo?: boolean
    tipos_pagos?: boolean | tipos_pagosArgs<ExtArgs>
    users?: boolean | usersArgs<ExtArgs>
  }, ExtArgs["result"]["cajas_bancos"]>

  export type cajas_bancosSelectScalar = {
    cajas_bancos_id?: boolean
    nombre_cuenta?: boolean
    tipo_pago_id?: boolean
    cantidad_actual?: boolean
    user_id?: boolean
    activo?: boolean
  }

  export type cajas_bancosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tipos_pagos?: boolean | tipos_pagosArgs<ExtArgs>
    users?: boolean | usersArgs<ExtArgs>
  }


  type cajas_bancosGetPayload<S extends boolean | null | undefined | cajas_bancosArgs> = $Types.GetResult<cajas_bancosPayload, S>

  type cajas_bancosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<cajas_bancosFindManyArgs, 'select' | 'include'> & {
      select?: Cajas_bancosCountAggregateInputType | true
    }

  export interface cajas_bancosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cajas_bancos'], meta: { name: 'cajas_bancos' } }
    /**
     * Find zero or one Cajas_bancos that matches the filter.
     * @param {cajas_bancosFindUniqueArgs} args - Arguments to find a Cajas_bancos
     * @example
     * // Get one Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cajas_bancosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cajas_bancosFindUniqueArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cajas_bancos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cajas_bancosFindUniqueOrThrowArgs} args - Arguments to find a Cajas_bancos
     * @example
     * // Get one Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cajas_bancosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cajas_bancosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cajas_bancos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cajas_bancosFindFirstArgs} args - Arguments to find a Cajas_bancos
     * @example
     * // Get one Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cajas_bancosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cajas_bancosFindFirstArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cajas_bancos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cajas_bancosFindFirstOrThrowArgs} args - Arguments to find a Cajas_bancos
     * @example
     * // Get one Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cajas_bancosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cajas_bancosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cajas_bancos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cajas_bancosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.findMany()
     * 
     * // Get first 10 Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.findMany({ take: 10 })
     * 
     * // Only select the `cajas_bancos_id`
     * const cajas_bancosWithCajas_bancos_idOnly = await prisma.cajas_bancos.findMany({ select: { cajas_bancos_id: true } })
     * 
    **/
    findMany<T extends cajas_bancosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cajas_bancosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cajas_bancos.
     * @param {cajas_bancosCreateArgs} args - Arguments to create a Cajas_bancos.
     * @example
     * // Create one Cajas_bancos
     * const Cajas_bancos = await prisma.cajas_bancos.create({
     *   data: {
     *     // ... data to create a Cajas_bancos
     *   }
     * })
     * 
    **/
    create<T extends cajas_bancosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cajas_bancosCreateArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cajas_bancos.
     *     @param {cajas_bancosCreateManyArgs} args - Arguments to create many Cajas_bancos.
     *     @example
     *     // Create many Cajas_bancos
     *     const cajas_bancos = await prisma.cajas_bancos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cajas_bancosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cajas_bancosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cajas_bancos.
     * @param {cajas_bancosDeleteArgs} args - Arguments to delete one Cajas_bancos.
     * @example
     * // Delete one Cajas_bancos
     * const Cajas_bancos = await prisma.cajas_bancos.delete({
     *   where: {
     *     // ... filter to delete one Cajas_bancos
     *   }
     * })
     * 
    **/
    delete<T extends cajas_bancosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cajas_bancosDeleteArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cajas_bancos.
     * @param {cajas_bancosUpdateArgs} args - Arguments to update one Cajas_bancos.
     * @example
     * // Update one Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cajas_bancosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cajas_bancosUpdateArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cajas_bancos.
     * @param {cajas_bancosDeleteManyArgs} args - Arguments to filter Cajas_bancos to delete.
     * @example
     * // Delete a few Cajas_bancos
     * const { count } = await prisma.cajas_bancos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cajas_bancosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cajas_bancosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cajas_bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cajas_bancosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cajas_bancosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cajas_bancosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cajas_bancos.
     * @param {cajas_bancosUpsertArgs} args - Arguments to update or create a Cajas_bancos.
     * @example
     * // Update or create a Cajas_bancos
     * const cajas_bancos = await prisma.cajas_bancos.upsert({
     *   create: {
     *     // ... data to create a Cajas_bancos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cajas_bancos we want to update
     *   }
     * })
    **/
    upsert<T extends cajas_bancosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cajas_bancosUpsertArgs<ExtArgs>>
    ): Prisma__cajas_bancosClient<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cajas_bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cajas_bancosCountArgs} args - Arguments to filter Cajas_bancos to count.
     * @example
     * // Count the number of Cajas_bancos
     * const count = await prisma.cajas_bancos.count({
     *   where: {
     *     // ... the filter for the Cajas_bancos we want to count
     *   }
     * })
    **/
    count<T extends cajas_bancosCountArgs>(
      args?: Subset<T, cajas_bancosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cajas_bancosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cajas_bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cajas_bancosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cajas_bancosAggregateArgs>(args: Subset<T, Cajas_bancosAggregateArgs>): Prisma.PrismaPromise<GetCajas_bancosAggregateType<T>>

    /**
     * Group by Cajas_bancos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cajas_bancosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cajas_bancosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cajas_bancosGroupByArgs['orderBy'] }
        : { orderBy?: cajas_bancosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cajas_bancosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCajas_bancosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cajas_bancos model
   */
  readonly fields: cajas_bancosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cajas_bancos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cajas_bancosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tipos_pagos<T extends tipos_pagosArgs<ExtArgs> = {}>(args?: Subset<T, tipos_pagosArgs<ExtArgs>>): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    users<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the cajas_bancos model
   */ 
  interface cajas_bancosFieldRefs {
    readonly cajas_bancos_id: FieldRef<"cajas_bancos", 'Int'>
    readonly nombre_cuenta: FieldRef<"cajas_bancos", 'String'>
    readonly tipo_pago_id: FieldRef<"cajas_bancos", 'Int'>
    readonly cantidad_actual: FieldRef<"cajas_bancos", 'Int'>
    readonly user_id: FieldRef<"cajas_bancos", 'Int'>
    readonly activo: FieldRef<"cajas_bancos", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * cajas_bancos findUnique
   */
  export type cajas_bancosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * Filter, which cajas_bancos to fetch.
     */
    where: cajas_bancosWhereUniqueInput
  }


  /**
   * cajas_bancos findUniqueOrThrow
   */
  export type cajas_bancosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * Filter, which cajas_bancos to fetch.
     */
    where: cajas_bancosWhereUniqueInput
  }


  /**
   * cajas_bancos findFirst
   */
  export type cajas_bancosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * Filter, which cajas_bancos to fetch.
     */
    where?: cajas_bancosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cajas_bancos to fetch.
     */
    orderBy?: cajas_bancosOrderByWithRelationInput | cajas_bancosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cajas_bancos.
     */
    cursor?: cajas_bancosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cajas_bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cajas_bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cajas_bancos.
     */
    distinct?: Cajas_bancosScalarFieldEnum | Cajas_bancosScalarFieldEnum[]
  }


  /**
   * cajas_bancos findFirstOrThrow
   */
  export type cajas_bancosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * Filter, which cajas_bancos to fetch.
     */
    where?: cajas_bancosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cajas_bancos to fetch.
     */
    orderBy?: cajas_bancosOrderByWithRelationInput | cajas_bancosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cajas_bancos.
     */
    cursor?: cajas_bancosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cajas_bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cajas_bancos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cajas_bancos.
     */
    distinct?: Cajas_bancosScalarFieldEnum | Cajas_bancosScalarFieldEnum[]
  }


  /**
   * cajas_bancos findMany
   */
  export type cajas_bancosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * Filter, which cajas_bancos to fetch.
     */
    where?: cajas_bancosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cajas_bancos to fetch.
     */
    orderBy?: cajas_bancosOrderByWithRelationInput | cajas_bancosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cajas_bancos.
     */
    cursor?: cajas_bancosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cajas_bancos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cajas_bancos.
     */
    skip?: number
    distinct?: Cajas_bancosScalarFieldEnum | Cajas_bancosScalarFieldEnum[]
  }


  /**
   * cajas_bancos create
   */
  export type cajas_bancosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * The data needed to create a cajas_bancos.
     */
    data: XOR<cajas_bancosCreateInput, cajas_bancosUncheckedCreateInput>
  }


  /**
   * cajas_bancos createMany
   */
  export type cajas_bancosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cajas_bancos.
     */
    data: cajas_bancosCreateManyInput | cajas_bancosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * cajas_bancos update
   */
  export type cajas_bancosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * The data needed to update a cajas_bancos.
     */
    data: XOR<cajas_bancosUpdateInput, cajas_bancosUncheckedUpdateInput>
    /**
     * Choose, which cajas_bancos to update.
     */
    where: cajas_bancosWhereUniqueInput
  }


  /**
   * cajas_bancos updateMany
   */
  export type cajas_bancosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cajas_bancos.
     */
    data: XOR<cajas_bancosUpdateManyMutationInput, cajas_bancosUncheckedUpdateManyInput>
    /**
     * Filter which cajas_bancos to update
     */
    where?: cajas_bancosWhereInput
  }


  /**
   * cajas_bancos upsert
   */
  export type cajas_bancosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * The filter to search for the cajas_bancos to update in case it exists.
     */
    where: cajas_bancosWhereUniqueInput
    /**
     * In case the cajas_bancos found by the `where` argument doesn't exist, create a new cajas_bancos with this data.
     */
    create: XOR<cajas_bancosCreateInput, cajas_bancosUncheckedCreateInput>
    /**
     * In case the cajas_bancos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cajas_bancosUpdateInput, cajas_bancosUncheckedUpdateInput>
  }


  /**
   * cajas_bancos delete
   */
  export type cajas_bancosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    /**
     * Filter which cajas_bancos to delete.
     */
    where: cajas_bancosWhereUniqueInput
  }


  /**
   * cajas_bancos deleteMany
   */
  export type cajas_bancosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which cajas_bancos to delete
     */
    where?: cajas_bancosWhereInput
  }


  /**
   * cajas_bancos without action
   */
  export type cajas_bancosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
  }



  /**
   * Model categorias
   */


  export type AggregateCategorias = {
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  export type CategoriasAvgAggregateOutputType = {
    categoria_id: number | null
  }

  export type CategoriasSumAggregateOutputType = {
    categoria_id: number | null
  }

  export type CategoriasMinAggregateOutputType = {
    categoria_id: number | null
    categoria: string | null
  }

  export type CategoriasMaxAggregateOutputType = {
    categoria_id: number | null
    categoria: string | null
  }

  export type CategoriasCountAggregateOutputType = {
    categoria_id: number
    categoria: number
    _all: number
  }


  export type CategoriasAvgAggregateInputType = {
    categoria_id?: true
  }

  export type CategoriasSumAggregateInputType = {
    categoria_id?: true
  }

  export type CategoriasMinAggregateInputType = {
    categoria_id?: true
    categoria?: true
  }

  export type CategoriasMaxAggregateInputType = {
    categoria_id?: true
    categoria?: true
  }

  export type CategoriasCountAggregateInputType = {
    categoria_id?: true
    categoria?: true
    _all?: true
  }

  export type CategoriasAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to aggregate.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriasMaxAggregateInputType
  }

  export type GetCategoriasAggregateType<T extends CategoriasAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorias[P]>
      : GetScalarType<T[P], AggregateCategorias[P]>
  }




  export type categoriasGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoriasWhereInput
    orderBy?: categoriasOrderByWithAggregationInput | categoriasOrderByWithAggregationInput[]
    by: CategoriasScalarFieldEnum[] | CategoriasScalarFieldEnum
    having?: categoriasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriasCountAggregateInputType | true
    _avg?: CategoriasAvgAggregateInputType
    _sum?: CategoriasSumAggregateInputType
    _min?: CategoriasMinAggregateInputType
    _max?: CategoriasMaxAggregateInputType
  }


  export type CategoriasGroupByOutputType = {
    categoria_id: number
    categoria: string
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  type GetCategoriasGroupByPayload<T extends categoriasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
        }
      >
    >


  export type categoriasSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoria_id?: boolean
    categoria?: boolean
    egresos_futuros?: boolean | categorias$egresos_futurosArgs<ExtArgs>
    ingresos_futuros?: boolean | categorias$ingresos_futurosArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>

  export type categoriasSelectScalar = {
    categoria_id?: boolean
    categoria?: boolean
  }

  export type categoriasInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    egresos_futuros?: boolean | categorias$egresos_futurosArgs<ExtArgs>
    ingresos_futuros?: boolean | categorias$ingresos_futurosArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeArgs<ExtArgs>
  }


  type categoriasGetPayload<S extends boolean | null | undefined | categoriasArgs> = $Types.GetResult<categoriasPayload, S>

  type categoriasCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoriasFindManyArgs, 'select' | 'include'> & {
      select?: CategoriasCountAggregateInputType | true
    }

  export interface categoriasDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categorias'], meta: { name: 'categorias' } }
    /**
     * Find zero or one Categorias that matches the filter.
     * @param {categoriasFindUniqueArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriasFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categorias that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriasFindUniqueOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriasFindFirstArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categorias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindFirstOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categorias.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categorias.findMany({ take: 10 })
     * 
     * // Only select the `categoria_id`
     * const categoriasWithCategoria_idOnly = await prisma.categorias.findMany({ select: { categoria_id: true } })
     * 
    **/
    findMany<T extends categoriasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categorias.
     * @param {categoriasCreateArgs} args - Arguments to create a Categorias.
     * @example
     * // Create one Categorias
     * const Categorias = await prisma.categorias.create({
     *   data: {
     *     // ... data to create a Categorias
     *   }
     * })
     * 
    **/
    create<T extends categoriasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriasCreateArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {categoriasCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categorias = await prisma.categorias.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorias.
     * @param {categoriasDeleteArgs} args - Arguments to delete one Categorias.
     * @example
     * // Delete one Categorias
     * const Categorias = await prisma.categorias.delete({
     *   where: {
     *     // ... filter to delete one Categorias
     *   }
     * })
     * 
    **/
    delete<T extends categoriasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriasDeleteArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categorias.
     * @param {categoriasUpdateArgs} args - Arguments to update one Categorias.
     * @example
     * // Update one Categorias
     * const categorias = await prisma.categorias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriasUpdateArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {categoriasDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categorias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categorias = await prisma.categorias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorias.
     * @param {categoriasUpsertArgs} args - Arguments to update or create a Categorias.
     * @example
     * // Update or create a Categorias
     * const categorias = await prisma.categorias.upsert({
     *   create: {
     *     // ... data to create a Categorias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorias we want to update
     *   }
     * })
    **/
    upsert<T extends categoriasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriasUpsertArgs<ExtArgs>>
    ): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categorias.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriasCountArgs>(
      args?: Subset<T, categoriasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriasAggregateArgs>(args: Subset<T, CategoriasAggregateArgs>): Prisma.PrismaPromise<GetCategoriasAggregateType<T>>

    /**
     * Group by Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriasGroupByArgs['orderBy'] }
        : { orderBy?: categoriasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categorias model
   */
  readonly fields: categoriasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categorias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoriasClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    egresos_futuros<T extends categorias$egresos_futurosArgs<ExtArgs> = {}>(args?: Subset<T, categorias$egresos_futurosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findMany'>| Null>;

    ingresos_futuros<T extends categorias$ingresos_futurosArgs<ExtArgs> = {}>(args?: Subset<T, categorias$ingresos_futurosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the categorias model
   */ 
  interface categoriasFieldRefs {
    readonly categoria_id: FieldRef<"categorias", 'Int'>
    readonly categoria: FieldRef<"categorias", 'String'>
  }
    

  // Custom InputTypes

  /**
   * categorias findUnique
   */
  export type categoriasFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }


  /**
   * categorias findUniqueOrThrow
   */
  export type categoriasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where: categoriasWhereUniqueInput
  }


  /**
   * categorias findFirst
   */
  export type categoriasFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }


  /**
   * categorias findFirstOrThrow
   */
  export type categoriasFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }


  /**
   * categorias findMany
   */
  export type categoriasFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriasOrderByWithRelationInput | categoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }


  /**
   * categorias create
   */
  export type categoriasCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The data needed to create a categorias.
     */
    data: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
  }


  /**
   * categorias createMany
   */
  export type categoriasCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriasCreateManyInput | categoriasCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * categorias update
   */
  export type categoriasUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The data needed to update a categorias.
     */
    data: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
    /**
     * Choose, which categorias to update.
     */
    where: categoriasWhereUniqueInput
  }


  /**
   * categorias updateMany
   */
  export type categoriasUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriasUpdateManyMutationInput, categoriasUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriasWhereInput
  }


  /**
   * categorias upsert
   */
  export type categoriasUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * The filter to search for the categorias to update in case it exists.
     */
    where: categoriasWhereUniqueInput
    /**
     * In case the categorias found by the `where` argument doesn't exist, create a new categorias with this data.
     */
    create: XOR<categoriasCreateInput, categoriasUncheckedCreateInput>
    /**
     * In case the categorias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriasUpdateInput, categoriasUncheckedUpdateInput>
  }


  /**
   * categorias delete
   */
  export type categoriasDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
    /**
     * Filter which categorias to delete.
     */
    where: categoriasWhereUniqueInput
  }


  /**
   * categorias deleteMany
   */
  export type categoriasDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriasWhereInput
  }


  /**
   * categorias.egresos_futuros
   */
  export type categorias$egresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    where?: egresos_futurosWhereInput
    orderBy?: egresos_futurosOrderByWithRelationInput | egresos_futurosOrderByWithRelationInput[]
    cursor?: egresos_futurosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Egresos_futurosScalarFieldEnum | Egresos_futurosScalarFieldEnum[]
  }


  /**
   * categorias.ingresos_futuros
   */
  export type categorias$ingresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    where?: ingresos_futurosWhereInput
    orderBy?: ingresos_futurosOrderByWithRelationInput | ingresos_futurosOrderByWithRelationInput[]
    cursor?: ingresos_futurosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ingresos_futurosScalarFieldEnum | Ingresos_futurosScalarFieldEnum[]
  }


  /**
   * categorias without action
   */
  export type categoriasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categorias
     */
    select?: categoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriasInclude<ExtArgs> | null
  }



  /**
   * Model clientes
   */


  export type AggregateClientes = {
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  export type ClientesAvgAggregateOutputType = {
    cliente_id: number | null
    num_empleados: number | null
    user_id: number | null
    activo: number | null
  }

  export type ClientesSumAggregateOutputType = {
    cliente_id: number | null
    num_empleados: number | null
    user_id: number | null
    activo: number | null
  }

  export type ClientesMinAggregateOutputType = {
    cliente_id: number | null
    nombre: string | null
    apellido: string | null
    puesto: string | null
    celular: string | null
    empresa: string | null
    dedica_empresa: string | null
    num_empleados: number | null
    fecha: Date | null
    user_id: number | null
    activo: number | null
  }

  export type ClientesMaxAggregateOutputType = {
    cliente_id: number | null
    nombre: string | null
    apellido: string | null
    puesto: string | null
    celular: string | null
    empresa: string | null
    dedica_empresa: string | null
    num_empleados: number | null
    fecha: Date | null
    user_id: number | null
    activo: number | null
  }

  export type ClientesCountAggregateOutputType = {
    cliente_id: number
    nombre: number
    apellido: number
    puesto: number
    celular: number
    empresa: number
    dedica_empresa: number
    num_empleados: number
    fecha: number
    user_id: number
    activo: number
    _all: number
  }


  export type ClientesAvgAggregateInputType = {
    cliente_id?: true
    num_empleados?: true
    user_id?: true
    activo?: true
  }

  export type ClientesSumAggregateInputType = {
    cliente_id?: true
    num_empleados?: true
    user_id?: true
    activo?: true
  }

  export type ClientesMinAggregateInputType = {
    cliente_id?: true
    nombre?: true
    apellido?: true
    puesto?: true
    celular?: true
    empresa?: true
    dedica_empresa?: true
    num_empleados?: true
    fecha?: true
    user_id?: true
    activo?: true
  }

  export type ClientesMaxAggregateInputType = {
    cliente_id?: true
    nombre?: true
    apellido?: true
    puesto?: true
    celular?: true
    empresa?: true
    dedica_empresa?: true
    num_empleados?: true
    fecha?: true
    user_id?: true
    activo?: true
  }

  export type ClientesCountAggregateInputType = {
    cliente_id?: true
    nombre?: true
    apellido?: true
    puesto?: true
    celular?: true
    empresa?: true
    dedica_empresa?: true
    num_empleados?: true
    fecha?: true
    user_id?: true
    activo?: true
    _all?: true
  }

  export type ClientesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to aggregate.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesMaxAggregateInputType
  }

  export type GetClientesAggregateType<T extends ClientesAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes[P]>
      : GetScalarType<T[P], AggregateClientes[P]>
  }




  export type clientesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: clientesWhereInput
    orderBy?: clientesOrderByWithAggregationInput | clientesOrderByWithAggregationInput[]
    by: ClientesScalarFieldEnum[] | ClientesScalarFieldEnum
    having?: clientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesCountAggregateInputType | true
    _avg?: ClientesAvgAggregateInputType
    _sum?: ClientesSumAggregateInputType
    _min?: ClientesMinAggregateInputType
    _max?: ClientesMaxAggregateInputType
  }


  export type ClientesGroupByOutputType = {
    cliente_id: number
    nombre: string
    apellido: string
    puesto: string
    celular: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date
    user_id: number
    activo: number
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  type GetClientesGroupByPayload<T extends clientesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesGroupByOutputType[P]>
        }
      >
    >


  export type clientesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cliente_id?: boolean
    nombre?: boolean
    apellido?: boolean
    puesto?: boolean
    celular?: boolean
    empresa?: boolean
    dedica_empresa?: boolean
    num_empleados?: boolean
    fecha?: boolean
    user_id?: boolean
    activo?: boolean
    users?: boolean | usersArgs<ExtArgs>
  }, ExtArgs["result"]["clientes"]>

  export type clientesSelectScalar = {
    cliente_id?: boolean
    nombre?: boolean
    apellido?: boolean
    puesto?: boolean
    celular?: boolean
    empresa?: boolean
    dedica_empresa?: boolean
    num_empleados?: boolean
    fecha?: boolean
    user_id?: boolean
    activo?: boolean
  }

  export type clientesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | usersArgs<ExtArgs>
  }


  type clientesGetPayload<S extends boolean | null | undefined | clientesArgs> = $Types.GetResult<clientesPayload, S>

  type clientesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<clientesFindManyArgs, 'select' | 'include'> & {
      select?: ClientesCountAggregateInputType | true
    }

  export interface clientesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clientes'], meta: { name: 'clientes' } }
    /**
     * Find zero or one Clientes that matches the filter.
     * @param {clientesFindUniqueArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, clientesFindUniqueArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Clientes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clientesFindUniqueOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesFindFirstArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Clientes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.clientes.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.clientes.findMany({ take: 10 })
     * 
     * // Only select the `cliente_id`
     * const clientesWithCliente_idOnly = await prisma.clientes.findMany({ select: { cliente_id: true } })
     * 
    **/
    findMany<T extends clientesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Clientes.
     * @param {clientesCreateArgs} args - Arguments to create a Clientes.
     * @example
     * // Create one Clientes
     * const Clientes = await prisma.clientes.create({
     *   data: {
     *     // ... data to create a Clientes
     *   }
     * })
     * 
    **/
    create<T extends clientesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, clientesCreateArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clientes.
     *     @param {clientesCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const clientes = await prisma.clientes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes.
     * @param {clientesDeleteArgs} args - Arguments to delete one Clientes.
     * @example
     * // Delete one Clientes
     * const Clientes = await prisma.clientes.delete({
     *   where: {
     *     // ... filter to delete one Clientes
     *   }
     * })
     * 
    **/
    delete<T extends clientesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, clientesDeleteArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Clientes.
     * @param {clientesUpdateArgs} args - Arguments to update one Clientes.
     * @example
     * // Update one Clientes
     * const clientes = await prisma.clientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, clientesUpdateArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {clientesDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.clientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const clientes = await prisma.clientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, clientesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes.
     * @param {clientesUpsertArgs} args - Arguments to update or create a Clientes.
     * @example
     * // Update or create a Clientes
     * const clientes = await prisma.clientes.upsert({
     *   create: {
     *     // ... data to create a Clientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes we want to update
     *   }
     * })
    **/
    upsert<T extends clientesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, clientesUpsertArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.clientes.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clientesCountArgs>(
      args?: Subset<T, clientesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesAggregateArgs>(args: Subset<T, ClientesAggregateArgs>): Prisma.PrismaPromise<GetClientesAggregateType<T>>

    /**
     * Group by Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientesGroupByArgs['orderBy'] }
        : { orderBy?: clientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clientes model
   */
  readonly fields: clientesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the clientes model
   */ 
  interface clientesFieldRefs {
    readonly cliente_id: FieldRef<"clientes", 'Int'>
    readonly nombre: FieldRef<"clientes", 'String'>
    readonly apellido: FieldRef<"clientes", 'String'>
    readonly puesto: FieldRef<"clientes", 'String'>
    readonly celular: FieldRef<"clientes", 'String'>
    readonly empresa: FieldRef<"clientes", 'String'>
    readonly dedica_empresa: FieldRef<"clientes", 'String'>
    readonly num_empleados: FieldRef<"clientes", 'Int'>
    readonly fecha: FieldRef<"clientes", 'DateTime'>
    readonly user_id: FieldRef<"clientes", 'Int'>
    readonly activo: FieldRef<"clientes", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * clientes findUnique
   */
  export type clientesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes findUniqueOrThrow
   */
  export type clientesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes findFirst
   */
  export type clientesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }


  /**
   * clientes findFirstOrThrow
   */
  export type clientesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }


  /**
   * clientes findMany
   */
  export type clientesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }


  /**
   * clientes create
   */
  export type clientesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * The data needed to create a clientes.
     */
    data: XOR<clientesCreateInput, clientesUncheckedCreateInput>
  }


  /**
   * clientes createMany
   */
  export type clientesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientes.
     */
    data: clientesCreateManyInput | clientesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * clientes update
   */
  export type clientesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * The data needed to update a clientes.
     */
    data: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
    /**
     * Choose, which clientes to update.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes updateMany
   */
  export type clientesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clientesWhereInput
  }


  /**
   * clientes upsert
   */
  export type clientesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * The filter to search for the clientes to update in case it exists.
     */
    where: clientesWhereUniqueInput
    /**
     * In case the clientes found by the `where` argument doesn't exist, create a new clientes with this data.
     */
    create: XOR<clientesCreateInput, clientesUncheckedCreateInput>
    /**
     * In case the clientes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
  }


  /**
   * clientes delete
   */
  export type clientesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    /**
     * Filter which clientes to delete.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes deleteMany
   */
  export type clientesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to delete
     */
    where?: clientesWhereInput
  }


  /**
   * clientes without action
   */
  export type clientesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
  }



  /**
   * Model egresos_futuros
   */


  export type AggregateEgresos_futuros = {
    _count: Egresos_futurosCountAggregateOutputType | null
    _avg: Egresos_futurosAvgAggregateOutputType | null
    _sum: Egresos_futurosSumAggregateOutputType | null
    _min: Egresos_futurosMinAggregateOutputType | null
    _max: Egresos_futurosMaxAggregateOutputType | null
  }

  export type Egresos_futurosAvgAggregateOutputType = {
    egresos_futuros_id: number | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    user_id: number | null
  }

  export type Egresos_futurosSumAggregateOutputType = {
    egresos_futuros_id: number | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    user_id: number | null
  }

  export type Egresos_futurosMinAggregateOutputType = {
    egresos_futuros_id: number | null
    nombre_persona_empresa: string | null
    concepto: string | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    fecha_tentativa_pago: Date | null
    user_id: number | null
    activo: boolean | null
  }

  export type Egresos_futurosMaxAggregateOutputType = {
    egresos_futuros_id: number | null
    nombre_persona_empresa: string | null
    concepto: string | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    fecha_tentativa_pago: Date | null
    user_id: number | null
    activo: boolean | null
  }

  export type Egresos_futurosCountAggregateOutputType = {
    egresos_futuros_id: number
    nombre_persona_empresa: number
    concepto: number
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_pago: number
    user_id: number
    activo: number
    _all: number
  }


  export type Egresos_futurosAvgAggregateInputType = {
    egresos_futuros_id?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    user_id?: true
  }

  export type Egresos_futurosSumAggregateInputType = {
    egresos_futuros_id?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    user_id?: true
  }

  export type Egresos_futurosMinAggregateInputType = {
    egresos_futuros_id?: true
    nombre_persona_empresa?: true
    concepto?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    fecha_tentativa_pago?: true
    user_id?: true
    activo?: true
  }

  export type Egresos_futurosMaxAggregateInputType = {
    egresos_futuros_id?: true
    nombre_persona_empresa?: true
    concepto?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    fecha_tentativa_pago?: true
    user_id?: true
    activo?: true
  }

  export type Egresos_futurosCountAggregateInputType = {
    egresos_futuros_id?: true
    nombre_persona_empresa?: true
    concepto?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    fecha_tentativa_pago?: true
    user_id?: true
    activo?: true
    _all?: true
  }

  export type Egresos_futurosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which egresos_futuros to aggregate.
     */
    where?: egresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of egresos_futuros to fetch.
     */
    orderBy?: egresos_futurosOrderByWithRelationInput | egresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: egresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` egresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` egresos_futuros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned egresos_futuros
    **/
    _count?: true | Egresos_futurosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Egresos_futurosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Egresos_futurosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Egresos_futurosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Egresos_futurosMaxAggregateInputType
  }

  export type GetEgresos_futurosAggregateType<T extends Egresos_futurosAggregateArgs> = {
        [P in keyof T & keyof AggregateEgresos_futuros]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEgresos_futuros[P]>
      : GetScalarType<T[P], AggregateEgresos_futuros[P]>
  }




  export type egresos_futurosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: egresos_futurosWhereInput
    orderBy?: egresos_futurosOrderByWithAggregationInput | egresos_futurosOrderByWithAggregationInput[]
    by: Egresos_futurosScalarFieldEnum[] | Egresos_futurosScalarFieldEnum
    having?: egresos_futurosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Egresos_futurosCountAggregateInputType | true
    _avg?: Egresos_futurosAvgAggregateInputType
    _sum?: Egresos_futurosSumAggregateInputType
    _min?: Egresos_futurosMinAggregateInputType
    _max?: Egresos_futurosMaxAggregateInputType
  }


  export type Egresos_futurosGroupByOutputType = {
    egresos_futuros_id: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date
    user_id: number
    activo: boolean
    _count: Egresos_futurosCountAggregateOutputType | null
    _avg: Egresos_futurosAvgAggregateOutputType | null
    _sum: Egresos_futurosSumAggregateOutputType | null
    _min: Egresos_futurosMinAggregateOutputType | null
    _max: Egresos_futurosMaxAggregateOutputType | null
  }

  type GetEgresos_futurosGroupByPayload<T extends egresos_futurosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Egresos_futurosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Egresos_futurosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Egresos_futurosGroupByOutputType[P]>
            : GetScalarType<T[P], Egresos_futurosGroupByOutputType[P]>
        }
      >
    >


  export type egresos_futurosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    egresos_futuros_id?: boolean
    nombre_persona_empresa?: boolean
    concepto?: boolean
    tipo_pago_id?: boolean
    categoria_id?: boolean
    monto?: boolean
    fecha_tentativa_pago?: boolean
    user_id?: boolean
    activo?: boolean
    categorias?: boolean | categoriasArgs<ExtArgs>
    tipos_pagos?: boolean | tipos_pagosArgs<ExtArgs>
    users?: boolean | usersArgs<ExtArgs>
  }, ExtArgs["result"]["egresos_futuros"]>

  export type egresos_futurosSelectScalar = {
    egresos_futuros_id?: boolean
    nombre_persona_empresa?: boolean
    concepto?: boolean
    tipo_pago_id?: boolean
    categoria_id?: boolean
    monto?: boolean
    fecha_tentativa_pago?: boolean
    user_id?: boolean
    activo?: boolean
  }

  export type egresos_futurosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    categorias?: boolean | categoriasArgs<ExtArgs>
    tipos_pagos?: boolean | tipos_pagosArgs<ExtArgs>
    users?: boolean | usersArgs<ExtArgs>
  }


  type egresos_futurosGetPayload<S extends boolean | null | undefined | egresos_futurosArgs> = $Types.GetResult<egresos_futurosPayload, S>

  type egresos_futurosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<egresos_futurosFindManyArgs, 'select' | 'include'> & {
      select?: Egresos_futurosCountAggregateInputType | true
    }

  export interface egresos_futurosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['egresos_futuros'], meta: { name: 'egresos_futuros' } }
    /**
     * Find zero or one Egresos_futuros that matches the filter.
     * @param {egresos_futurosFindUniqueArgs} args - Arguments to find a Egresos_futuros
     * @example
     * // Get one Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends egresos_futurosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, egresos_futurosFindUniqueArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Egresos_futuros that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {egresos_futurosFindUniqueOrThrowArgs} args - Arguments to find a Egresos_futuros
     * @example
     * // Get one Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends egresos_futurosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, egresos_futurosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Egresos_futuros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {egresos_futurosFindFirstArgs} args - Arguments to find a Egresos_futuros
     * @example
     * // Get one Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends egresos_futurosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, egresos_futurosFindFirstArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Egresos_futuros that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {egresos_futurosFindFirstOrThrowArgs} args - Arguments to find a Egresos_futuros
     * @example
     * // Get one Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends egresos_futurosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, egresos_futurosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Egresos_futuros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {egresos_futurosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.findMany()
     * 
     * // Get first 10 Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.findMany({ take: 10 })
     * 
     * // Only select the `egresos_futuros_id`
     * const egresos_futurosWithEgresos_futuros_idOnly = await prisma.egresos_futuros.findMany({ select: { egresos_futuros_id: true } })
     * 
    **/
    findMany<T extends egresos_futurosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, egresos_futurosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Egresos_futuros.
     * @param {egresos_futurosCreateArgs} args - Arguments to create a Egresos_futuros.
     * @example
     * // Create one Egresos_futuros
     * const Egresos_futuros = await prisma.egresos_futuros.create({
     *   data: {
     *     // ... data to create a Egresos_futuros
     *   }
     * })
     * 
    **/
    create<T extends egresos_futurosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, egresos_futurosCreateArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Egresos_futuros.
     *     @param {egresos_futurosCreateManyArgs} args - Arguments to create many Egresos_futuros.
     *     @example
     *     // Create many Egresos_futuros
     *     const egresos_futuros = await prisma.egresos_futuros.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends egresos_futurosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, egresos_futurosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Egresos_futuros.
     * @param {egresos_futurosDeleteArgs} args - Arguments to delete one Egresos_futuros.
     * @example
     * // Delete one Egresos_futuros
     * const Egresos_futuros = await prisma.egresos_futuros.delete({
     *   where: {
     *     // ... filter to delete one Egresos_futuros
     *   }
     * })
     * 
    **/
    delete<T extends egresos_futurosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, egresos_futurosDeleteArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Egresos_futuros.
     * @param {egresos_futurosUpdateArgs} args - Arguments to update one Egresos_futuros.
     * @example
     * // Update one Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends egresos_futurosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, egresos_futurosUpdateArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Egresos_futuros.
     * @param {egresos_futurosDeleteManyArgs} args - Arguments to filter Egresos_futuros to delete.
     * @example
     * // Delete a few Egresos_futuros
     * const { count } = await prisma.egresos_futuros.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends egresos_futurosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, egresos_futurosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Egresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {egresos_futurosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends egresos_futurosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, egresos_futurosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Egresos_futuros.
     * @param {egresos_futurosUpsertArgs} args - Arguments to update or create a Egresos_futuros.
     * @example
     * // Update or create a Egresos_futuros
     * const egresos_futuros = await prisma.egresos_futuros.upsert({
     *   create: {
     *     // ... data to create a Egresos_futuros
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Egresos_futuros we want to update
     *   }
     * })
    **/
    upsert<T extends egresos_futurosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, egresos_futurosUpsertArgs<ExtArgs>>
    ): Prisma__egresos_futurosClient<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Egresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {egresos_futurosCountArgs} args - Arguments to filter Egresos_futuros to count.
     * @example
     * // Count the number of Egresos_futuros
     * const count = await prisma.egresos_futuros.count({
     *   where: {
     *     // ... the filter for the Egresos_futuros we want to count
     *   }
     * })
    **/
    count<T extends egresos_futurosCountArgs>(
      args?: Subset<T, egresos_futurosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Egresos_futurosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Egresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Egresos_futurosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Egresos_futurosAggregateArgs>(args: Subset<T, Egresos_futurosAggregateArgs>): Prisma.PrismaPromise<GetEgresos_futurosAggregateType<T>>

    /**
     * Group by Egresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {egresos_futurosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends egresos_futurosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: egresos_futurosGroupByArgs['orderBy'] }
        : { orderBy?: egresos_futurosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, egresos_futurosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEgresos_futurosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the egresos_futuros model
   */
  readonly fields: egresos_futurosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for egresos_futuros.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__egresos_futurosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    categorias<T extends categoriasArgs<ExtArgs> = {}>(args?: Subset<T, categoriasArgs<ExtArgs>>): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    tipos_pagos<T extends tipos_pagosArgs<ExtArgs> = {}>(args?: Subset<T, tipos_pagosArgs<ExtArgs>>): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    users<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the egresos_futuros model
   */ 
  interface egresos_futurosFieldRefs {
    readonly egresos_futuros_id: FieldRef<"egresos_futuros", 'Int'>
    readonly nombre_persona_empresa: FieldRef<"egresos_futuros", 'String'>
    readonly concepto: FieldRef<"egresos_futuros", 'String'>
    readonly tipo_pago_id: FieldRef<"egresos_futuros", 'Int'>
    readonly categoria_id: FieldRef<"egresos_futuros", 'Int'>
    readonly monto: FieldRef<"egresos_futuros", 'Int'>
    readonly fecha_tentativa_pago: FieldRef<"egresos_futuros", 'DateTime'>
    readonly user_id: FieldRef<"egresos_futuros", 'Int'>
    readonly activo: FieldRef<"egresos_futuros", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * egresos_futuros findUnique
   */
  export type egresos_futurosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which egresos_futuros to fetch.
     */
    where: egresos_futurosWhereUniqueInput
  }


  /**
   * egresos_futuros findUniqueOrThrow
   */
  export type egresos_futurosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which egresos_futuros to fetch.
     */
    where: egresos_futurosWhereUniqueInput
  }


  /**
   * egresos_futuros findFirst
   */
  export type egresos_futurosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which egresos_futuros to fetch.
     */
    where?: egresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of egresos_futuros to fetch.
     */
    orderBy?: egresos_futurosOrderByWithRelationInput | egresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for egresos_futuros.
     */
    cursor?: egresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` egresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` egresos_futuros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of egresos_futuros.
     */
    distinct?: Egresos_futurosScalarFieldEnum | Egresos_futurosScalarFieldEnum[]
  }


  /**
   * egresos_futuros findFirstOrThrow
   */
  export type egresos_futurosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which egresos_futuros to fetch.
     */
    where?: egresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of egresos_futuros to fetch.
     */
    orderBy?: egresos_futurosOrderByWithRelationInput | egresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for egresos_futuros.
     */
    cursor?: egresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` egresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` egresos_futuros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of egresos_futuros.
     */
    distinct?: Egresos_futurosScalarFieldEnum | Egresos_futurosScalarFieldEnum[]
  }


  /**
   * egresos_futuros findMany
   */
  export type egresos_futurosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which egresos_futuros to fetch.
     */
    where?: egresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of egresos_futuros to fetch.
     */
    orderBy?: egresos_futurosOrderByWithRelationInput | egresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing egresos_futuros.
     */
    cursor?: egresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` egresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` egresos_futuros.
     */
    skip?: number
    distinct?: Egresos_futurosScalarFieldEnum | Egresos_futurosScalarFieldEnum[]
  }


  /**
   * egresos_futuros create
   */
  export type egresos_futurosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * The data needed to create a egresos_futuros.
     */
    data: XOR<egresos_futurosCreateInput, egresos_futurosUncheckedCreateInput>
  }


  /**
   * egresos_futuros createMany
   */
  export type egresos_futurosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many egresos_futuros.
     */
    data: egresos_futurosCreateManyInput | egresos_futurosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * egresos_futuros update
   */
  export type egresos_futurosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * The data needed to update a egresos_futuros.
     */
    data: XOR<egresos_futurosUpdateInput, egresos_futurosUncheckedUpdateInput>
    /**
     * Choose, which egresos_futuros to update.
     */
    where: egresos_futurosWhereUniqueInput
  }


  /**
   * egresos_futuros updateMany
   */
  export type egresos_futurosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update egresos_futuros.
     */
    data: XOR<egresos_futurosUpdateManyMutationInput, egresos_futurosUncheckedUpdateManyInput>
    /**
     * Filter which egresos_futuros to update
     */
    where?: egresos_futurosWhereInput
  }


  /**
   * egresos_futuros upsert
   */
  export type egresos_futurosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * The filter to search for the egresos_futuros to update in case it exists.
     */
    where: egresos_futurosWhereUniqueInput
    /**
     * In case the egresos_futuros found by the `where` argument doesn't exist, create a new egresos_futuros with this data.
     */
    create: XOR<egresos_futurosCreateInput, egresos_futurosUncheckedCreateInput>
    /**
     * In case the egresos_futuros was found with the provided `where` argument, update it with this data.
     */
    update: XOR<egresos_futurosUpdateInput, egresos_futurosUncheckedUpdateInput>
  }


  /**
   * egresos_futuros delete
   */
  export type egresos_futurosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    /**
     * Filter which egresos_futuros to delete.
     */
    where: egresos_futurosWhereUniqueInput
  }


  /**
   * egresos_futuros deleteMany
   */
  export type egresos_futurosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which egresos_futuros to delete
     */
    where?: egresos_futurosWhereInput
  }


  /**
   * egresos_futuros without action
   */
  export type egresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
  }



  /**
   * Model ingresos_futuros
   */


  export type AggregateIngresos_futuros = {
    _count: Ingresos_futurosCountAggregateOutputType | null
    _avg: Ingresos_futurosAvgAggregateOutputType | null
    _sum: Ingresos_futurosSumAggregateOutputType | null
    _min: Ingresos_futurosMinAggregateOutputType | null
    _max: Ingresos_futurosMaxAggregateOutputType | null
  }

  export type Ingresos_futurosAvgAggregateOutputType = {
    ingresos_futuros_id: number | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    user_id: number | null
  }

  export type Ingresos_futurosSumAggregateOutputType = {
    ingresos_futuros_id: number | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    user_id: number | null
  }

  export type Ingresos_futurosMinAggregateOutputType = {
    ingresos_futuros_id: number | null
    nombre_persona_empresa: string | null
    concepto: string | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    fecha_tentativa_cobro: Date | null
    user_id: number | null
    activo: boolean | null
  }

  export type Ingresos_futurosMaxAggregateOutputType = {
    ingresos_futuros_id: number | null
    nombre_persona_empresa: string | null
    concepto: string | null
    tipo_pago_id: number | null
    categoria_id: number | null
    monto: number | null
    fecha_tentativa_cobro: Date | null
    user_id: number | null
    activo: boolean | null
  }

  export type Ingresos_futurosCountAggregateOutputType = {
    ingresos_futuros_id: number
    nombre_persona_empresa: number
    concepto: number
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: number
    user_id: number
    activo: number
    _all: number
  }


  export type Ingresos_futurosAvgAggregateInputType = {
    ingresos_futuros_id?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    user_id?: true
  }

  export type Ingresos_futurosSumAggregateInputType = {
    ingresos_futuros_id?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    user_id?: true
  }

  export type Ingresos_futurosMinAggregateInputType = {
    ingresos_futuros_id?: true
    nombre_persona_empresa?: true
    concepto?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    fecha_tentativa_cobro?: true
    user_id?: true
    activo?: true
  }

  export type Ingresos_futurosMaxAggregateInputType = {
    ingresos_futuros_id?: true
    nombre_persona_empresa?: true
    concepto?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    fecha_tentativa_cobro?: true
    user_id?: true
    activo?: true
  }

  export type Ingresos_futurosCountAggregateInputType = {
    ingresos_futuros_id?: true
    nombre_persona_empresa?: true
    concepto?: true
    tipo_pago_id?: true
    categoria_id?: true
    monto?: true
    fecha_tentativa_cobro?: true
    user_id?: true
    activo?: true
    _all?: true
  }

  export type Ingresos_futurosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ingresos_futuros to aggregate.
     */
    where?: ingresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingresos_futuros to fetch.
     */
    orderBy?: ingresos_futurosOrderByWithRelationInput | ingresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ingresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingresos_futuros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ingresos_futuros
    **/
    _count?: true | Ingresos_futurosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ingresos_futurosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ingresos_futurosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ingresos_futurosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ingresos_futurosMaxAggregateInputType
  }

  export type GetIngresos_futurosAggregateType<T extends Ingresos_futurosAggregateArgs> = {
        [P in keyof T & keyof AggregateIngresos_futuros]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngresos_futuros[P]>
      : GetScalarType<T[P], AggregateIngresos_futuros[P]>
  }




  export type ingresos_futurosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ingresos_futurosWhereInput
    orderBy?: ingresos_futurosOrderByWithAggregationInput | ingresos_futurosOrderByWithAggregationInput[]
    by: Ingresos_futurosScalarFieldEnum[] | Ingresos_futurosScalarFieldEnum
    having?: ingresos_futurosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ingresos_futurosCountAggregateInputType | true
    _avg?: Ingresos_futurosAvgAggregateInputType
    _sum?: Ingresos_futurosSumAggregateInputType
    _min?: Ingresos_futurosMinAggregateInputType
    _max?: Ingresos_futurosMaxAggregateInputType
  }


  export type Ingresos_futurosGroupByOutputType = {
    ingresos_futuros_id: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date
    user_id: number
    activo: boolean
    _count: Ingresos_futurosCountAggregateOutputType | null
    _avg: Ingresos_futurosAvgAggregateOutputType | null
    _sum: Ingresos_futurosSumAggregateOutputType | null
    _min: Ingresos_futurosMinAggregateOutputType | null
    _max: Ingresos_futurosMaxAggregateOutputType | null
  }

  type GetIngresos_futurosGroupByPayload<T extends ingresos_futurosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ingresos_futurosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ingresos_futurosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ingresos_futurosGroupByOutputType[P]>
            : GetScalarType<T[P], Ingresos_futurosGroupByOutputType[P]>
        }
      >
    >


  export type ingresos_futurosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ingresos_futuros_id?: boolean
    nombre_persona_empresa?: boolean
    concepto?: boolean
    tipo_pago_id?: boolean
    categoria_id?: boolean
    monto?: boolean
    fecha_tentativa_cobro?: boolean
    user_id?: boolean
    activo?: boolean
    categorias?: boolean | categoriasArgs<ExtArgs>
    tipos_pagos?: boolean | tipos_pagosArgs<ExtArgs>
    users?: boolean | usersArgs<ExtArgs>
  }, ExtArgs["result"]["ingresos_futuros"]>

  export type ingresos_futurosSelectScalar = {
    ingresos_futuros_id?: boolean
    nombre_persona_empresa?: boolean
    concepto?: boolean
    tipo_pago_id?: boolean
    categoria_id?: boolean
    monto?: boolean
    fecha_tentativa_cobro?: boolean
    user_id?: boolean
    activo?: boolean
  }

  export type ingresos_futurosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    categorias?: boolean | categoriasArgs<ExtArgs>
    tipos_pagos?: boolean | tipos_pagosArgs<ExtArgs>
    users?: boolean | usersArgs<ExtArgs>
  }


  type ingresos_futurosGetPayload<S extends boolean | null | undefined | ingresos_futurosArgs> = $Types.GetResult<ingresos_futurosPayload, S>

  type ingresos_futurosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ingresos_futurosFindManyArgs, 'select' | 'include'> & {
      select?: Ingresos_futurosCountAggregateInputType | true
    }

  export interface ingresos_futurosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ingresos_futuros'], meta: { name: 'ingresos_futuros' } }
    /**
     * Find zero or one Ingresos_futuros that matches the filter.
     * @param {ingresos_futurosFindUniqueArgs} args - Arguments to find a Ingresos_futuros
     * @example
     * // Get one Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ingresos_futurosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ingresos_futurosFindUniqueArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ingresos_futuros that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ingresos_futurosFindUniqueOrThrowArgs} args - Arguments to find a Ingresos_futuros
     * @example
     * // Get one Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ingresos_futurosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ingresos_futurosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ingresos_futuros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingresos_futurosFindFirstArgs} args - Arguments to find a Ingresos_futuros
     * @example
     * // Get one Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ingresos_futurosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ingresos_futurosFindFirstArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ingresos_futuros that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingresos_futurosFindFirstOrThrowArgs} args - Arguments to find a Ingresos_futuros
     * @example
     * // Get one Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ingresos_futurosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ingresos_futurosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ingresos_futuros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingresos_futurosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.findMany()
     * 
     * // Get first 10 Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.findMany({ take: 10 })
     * 
     * // Only select the `ingresos_futuros_id`
     * const ingresos_futurosWithIngresos_futuros_idOnly = await prisma.ingresos_futuros.findMany({ select: { ingresos_futuros_id: true } })
     * 
    **/
    findMany<T extends ingresos_futurosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingresos_futurosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ingresos_futuros.
     * @param {ingresos_futurosCreateArgs} args - Arguments to create a Ingresos_futuros.
     * @example
     * // Create one Ingresos_futuros
     * const Ingresos_futuros = await prisma.ingresos_futuros.create({
     *   data: {
     *     // ... data to create a Ingresos_futuros
     *   }
     * })
     * 
    **/
    create<T extends ingresos_futurosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ingresos_futurosCreateArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ingresos_futuros.
     *     @param {ingresos_futurosCreateManyArgs} args - Arguments to create many Ingresos_futuros.
     *     @example
     *     // Create many Ingresos_futuros
     *     const ingresos_futuros = await prisma.ingresos_futuros.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ingresos_futurosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingresos_futurosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ingresos_futuros.
     * @param {ingresos_futurosDeleteArgs} args - Arguments to delete one Ingresos_futuros.
     * @example
     * // Delete one Ingresos_futuros
     * const Ingresos_futuros = await prisma.ingresos_futuros.delete({
     *   where: {
     *     // ... filter to delete one Ingresos_futuros
     *   }
     * })
     * 
    **/
    delete<T extends ingresos_futurosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ingresos_futurosDeleteArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ingresos_futuros.
     * @param {ingresos_futurosUpdateArgs} args - Arguments to update one Ingresos_futuros.
     * @example
     * // Update one Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ingresos_futurosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ingresos_futurosUpdateArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ingresos_futuros.
     * @param {ingresos_futurosDeleteManyArgs} args - Arguments to filter Ingresos_futuros to delete.
     * @example
     * // Delete a few Ingresos_futuros
     * const { count } = await prisma.ingresos_futuros.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ingresos_futurosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ingresos_futurosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingresos_futurosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ingresos_futurosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ingresos_futurosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingresos_futuros.
     * @param {ingresos_futurosUpsertArgs} args - Arguments to update or create a Ingresos_futuros.
     * @example
     * // Update or create a Ingresos_futuros
     * const ingresos_futuros = await prisma.ingresos_futuros.upsert({
     *   create: {
     *     // ... data to create a Ingresos_futuros
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingresos_futuros we want to update
     *   }
     * })
    **/
    upsert<T extends ingresos_futurosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ingresos_futurosUpsertArgs<ExtArgs>>
    ): Prisma__ingresos_futurosClient<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ingresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingresos_futurosCountArgs} args - Arguments to filter Ingresos_futuros to count.
     * @example
     * // Count the number of Ingresos_futuros
     * const count = await prisma.ingresos_futuros.count({
     *   where: {
     *     // ... the filter for the Ingresos_futuros we want to count
     *   }
     * })
    **/
    count<T extends ingresos_futurosCountArgs>(
      args?: Subset<T, ingresos_futurosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ingresos_futurosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ingresos_futurosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ingresos_futurosAggregateArgs>(args: Subset<T, Ingresos_futurosAggregateArgs>): Prisma.PrismaPromise<GetIngresos_futurosAggregateType<T>>

    /**
     * Group by Ingresos_futuros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ingresos_futurosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ingresos_futurosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ingresos_futurosGroupByArgs['orderBy'] }
        : { orderBy?: ingresos_futurosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ingresos_futurosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngresos_futurosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ingresos_futuros model
   */
  readonly fields: ingresos_futurosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ingresos_futuros.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ingresos_futurosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    categorias<T extends categoriasArgs<ExtArgs> = {}>(args?: Subset<T, categoriasArgs<ExtArgs>>): Prisma__categoriasClient<$Types.GetResult<categoriasPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    tipos_pagos<T extends tipos_pagosArgs<ExtArgs> = {}>(args?: Subset<T, tipos_pagosArgs<ExtArgs>>): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    users<T extends usersArgs<ExtArgs> = {}>(args?: Subset<T, usersArgs<ExtArgs>>): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the ingresos_futuros model
   */ 
  interface ingresos_futurosFieldRefs {
    readonly ingresos_futuros_id: FieldRef<"ingresos_futuros", 'Int'>
    readonly nombre_persona_empresa: FieldRef<"ingresos_futuros", 'String'>
    readonly concepto: FieldRef<"ingresos_futuros", 'String'>
    readonly tipo_pago_id: FieldRef<"ingresos_futuros", 'Int'>
    readonly categoria_id: FieldRef<"ingresos_futuros", 'Int'>
    readonly monto: FieldRef<"ingresos_futuros", 'Int'>
    readonly fecha_tentativa_cobro: FieldRef<"ingresos_futuros", 'DateTime'>
    readonly user_id: FieldRef<"ingresos_futuros", 'Int'>
    readonly activo: FieldRef<"ingresos_futuros", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ingresos_futuros findUnique
   */
  export type ingresos_futurosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which ingresos_futuros to fetch.
     */
    where: ingresos_futurosWhereUniqueInput
  }


  /**
   * ingresos_futuros findUniqueOrThrow
   */
  export type ingresos_futurosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which ingresos_futuros to fetch.
     */
    where: ingresos_futurosWhereUniqueInput
  }


  /**
   * ingresos_futuros findFirst
   */
  export type ingresos_futurosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which ingresos_futuros to fetch.
     */
    where?: ingresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingresos_futuros to fetch.
     */
    orderBy?: ingresos_futurosOrderByWithRelationInput | ingresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingresos_futuros.
     */
    cursor?: ingresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingresos_futuros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingresos_futuros.
     */
    distinct?: Ingresos_futurosScalarFieldEnum | Ingresos_futurosScalarFieldEnum[]
  }


  /**
   * ingresos_futuros findFirstOrThrow
   */
  export type ingresos_futurosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which ingresos_futuros to fetch.
     */
    where?: ingresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingresos_futuros to fetch.
     */
    orderBy?: ingresos_futurosOrderByWithRelationInput | ingresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ingresos_futuros.
     */
    cursor?: ingresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingresos_futuros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ingresos_futuros.
     */
    distinct?: Ingresos_futurosScalarFieldEnum | Ingresos_futurosScalarFieldEnum[]
  }


  /**
   * ingresos_futuros findMany
   */
  export type ingresos_futurosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * Filter, which ingresos_futuros to fetch.
     */
    where?: ingresos_futurosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ingresos_futuros to fetch.
     */
    orderBy?: ingresos_futurosOrderByWithRelationInput | ingresos_futurosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ingresos_futuros.
     */
    cursor?: ingresos_futurosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ingresos_futuros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ingresos_futuros.
     */
    skip?: number
    distinct?: Ingresos_futurosScalarFieldEnum | Ingresos_futurosScalarFieldEnum[]
  }


  /**
   * ingresos_futuros create
   */
  export type ingresos_futurosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * The data needed to create a ingresos_futuros.
     */
    data: XOR<ingresos_futurosCreateInput, ingresos_futurosUncheckedCreateInput>
  }


  /**
   * ingresos_futuros createMany
   */
  export type ingresos_futurosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ingresos_futuros.
     */
    data: ingresos_futurosCreateManyInput | ingresos_futurosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ingresos_futuros update
   */
  export type ingresos_futurosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * The data needed to update a ingresos_futuros.
     */
    data: XOR<ingresos_futurosUpdateInput, ingresos_futurosUncheckedUpdateInput>
    /**
     * Choose, which ingresos_futuros to update.
     */
    where: ingresos_futurosWhereUniqueInput
  }


  /**
   * ingresos_futuros updateMany
   */
  export type ingresos_futurosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ingresos_futuros.
     */
    data: XOR<ingresos_futurosUpdateManyMutationInput, ingresos_futurosUncheckedUpdateManyInput>
    /**
     * Filter which ingresos_futuros to update
     */
    where?: ingresos_futurosWhereInput
  }


  /**
   * ingresos_futuros upsert
   */
  export type ingresos_futurosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * The filter to search for the ingresos_futuros to update in case it exists.
     */
    where: ingresos_futurosWhereUniqueInput
    /**
     * In case the ingresos_futuros found by the `where` argument doesn't exist, create a new ingresos_futuros with this data.
     */
    create: XOR<ingresos_futurosCreateInput, ingresos_futurosUncheckedCreateInput>
    /**
     * In case the ingresos_futuros was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ingresos_futurosUpdateInput, ingresos_futurosUncheckedUpdateInput>
  }


  /**
   * ingresos_futuros delete
   */
  export type ingresos_futurosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    /**
     * Filter which ingresos_futuros to delete.
     */
    where: ingresos_futurosWhereUniqueInput
  }


  /**
   * ingresos_futuros deleteMany
   */
  export type ingresos_futurosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ingresos_futuros to delete
     */
    where?: ingresos_futurosWhereInput
  }


  /**
   * ingresos_futuros without action
   */
  export type ingresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
  }



  /**
   * Model tipos_pagos
   */


  export type AggregateTipos_pagos = {
    _count: Tipos_pagosCountAggregateOutputType | null
    _avg: Tipos_pagosAvgAggregateOutputType | null
    _sum: Tipos_pagosSumAggregateOutputType | null
    _min: Tipos_pagosMinAggregateOutputType | null
    _max: Tipos_pagosMaxAggregateOutputType | null
  }

  export type Tipos_pagosAvgAggregateOutputType = {
    tipo_pago_id: number | null
  }

  export type Tipos_pagosSumAggregateOutputType = {
    tipo_pago_id: number | null
  }

  export type Tipos_pagosMinAggregateOutputType = {
    tipo_pago_id: number | null
    tipo_pago: string | null
  }

  export type Tipos_pagosMaxAggregateOutputType = {
    tipo_pago_id: number | null
    tipo_pago: string | null
  }

  export type Tipos_pagosCountAggregateOutputType = {
    tipo_pago_id: number
    tipo_pago: number
    _all: number
  }


  export type Tipos_pagosAvgAggregateInputType = {
    tipo_pago_id?: true
  }

  export type Tipos_pagosSumAggregateInputType = {
    tipo_pago_id?: true
  }

  export type Tipos_pagosMinAggregateInputType = {
    tipo_pago_id?: true
    tipo_pago?: true
  }

  export type Tipos_pagosMaxAggregateInputType = {
    tipo_pago_id?: true
    tipo_pago?: true
  }

  export type Tipos_pagosCountAggregateInputType = {
    tipo_pago_id?: true
    tipo_pago?: true
    _all?: true
  }

  export type Tipos_pagosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tipos_pagos to aggregate.
     */
    where?: tipos_pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipos_pagos to fetch.
     */
    orderBy?: tipos_pagosOrderByWithRelationInput | tipos_pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tipos_pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipos_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipos_pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tipos_pagos
    **/
    _count?: true | Tipos_pagosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tipos_pagosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tipos_pagosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tipos_pagosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tipos_pagosMaxAggregateInputType
  }

  export type GetTipos_pagosAggregateType<T extends Tipos_pagosAggregateArgs> = {
        [P in keyof T & keyof AggregateTipos_pagos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipos_pagos[P]>
      : GetScalarType<T[P], AggregateTipos_pagos[P]>
  }




  export type tipos_pagosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tipos_pagosWhereInput
    orderBy?: tipos_pagosOrderByWithAggregationInput | tipos_pagosOrderByWithAggregationInput[]
    by: Tipos_pagosScalarFieldEnum[] | Tipos_pagosScalarFieldEnum
    having?: tipos_pagosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tipos_pagosCountAggregateInputType | true
    _avg?: Tipos_pagosAvgAggregateInputType
    _sum?: Tipos_pagosSumAggregateInputType
    _min?: Tipos_pagosMinAggregateInputType
    _max?: Tipos_pagosMaxAggregateInputType
  }


  export type Tipos_pagosGroupByOutputType = {
    tipo_pago_id: number
    tipo_pago: string
    _count: Tipos_pagosCountAggregateOutputType | null
    _avg: Tipos_pagosAvgAggregateOutputType | null
    _sum: Tipos_pagosSumAggregateOutputType | null
    _min: Tipos_pagosMinAggregateOutputType | null
    _max: Tipos_pagosMaxAggregateOutputType | null
  }

  type GetTipos_pagosGroupByPayload<T extends tipos_pagosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Tipos_pagosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tipos_pagosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tipos_pagosGroupByOutputType[P]>
            : GetScalarType<T[P], Tipos_pagosGroupByOutputType[P]>
        }
      >
    >


  export type tipos_pagosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tipo_pago_id?: boolean
    tipo_pago?: boolean
    cajas_bancos?: boolean | tipos_pagos$cajas_bancosArgs<ExtArgs>
    egresos_futuros?: boolean | tipos_pagos$egresos_futurosArgs<ExtArgs>
    ingresos_futuros?: boolean | tipos_pagos$ingresos_futurosArgs<ExtArgs>
    _count?: boolean | Tipos_pagosCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["tipos_pagos"]>

  export type tipos_pagosSelectScalar = {
    tipo_pago_id?: boolean
    tipo_pago?: boolean
  }

  export type tipos_pagosInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cajas_bancos?: boolean | tipos_pagos$cajas_bancosArgs<ExtArgs>
    egresos_futuros?: boolean | tipos_pagos$egresos_futurosArgs<ExtArgs>
    ingresos_futuros?: boolean | tipos_pagos$ingresos_futurosArgs<ExtArgs>
    _count?: boolean | Tipos_pagosCountOutputTypeArgs<ExtArgs>
  }


  type tipos_pagosGetPayload<S extends boolean | null | undefined | tipos_pagosArgs> = $Types.GetResult<tipos_pagosPayload, S>

  type tipos_pagosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<tipos_pagosFindManyArgs, 'select' | 'include'> & {
      select?: Tipos_pagosCountAggregateInputType | true
    }

  export interface tipos_pagosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tipos_pagos'], meta: { name: 'tipos_pagos' } }
    /**
     * Find zero or one Tipos_pagos that matches the filter.
     * @param {tipos_pagosFindUniqueArgs} args - Arguments to find a Tipos_pagos
     * @example
     * // Get one Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tipos_pagosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tipos_pagosFindUniqueArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tipos_pagos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tipos_pagosFindUniqueOrThrowArgs} args - Arguments to find a Tipos_pagos
     * @example
     * // Get one Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tipos_pagosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tipos_pagosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tipos_pagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipos_pagosFindFirstArgs} args - Arguments to find a Tipos_pagos
     * @example
     * // Get one Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tipos_pagosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tipos_pagosFindFirstArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tipos_pagos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipos_pagosFindFirstOrThrowArgs} args - Arguments to find a Tipos_pagos
     * @example
     * // Get one Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tipos_pagosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tipos_pagosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tipos_pagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipos_pagosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.findMany()
     * 
     * // Get first 10 Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.findMany({ take: 10 })
     * 
     * // Only select the `tipo_pago_id`
     * const tipos_pagosWithTipo_pago_idOnly = await prisma.tipos_pagos.findMany({ select: { tipo_pago_id: true } })
     * 
    **/
    findMany<T extends tipos_pagosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipos_pagosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tipos_pagos.
     * @param {tipos_pagosCreateArgs} args - Arguments to create a Tipos_pagos.
     * @example
     * // Create one Tipos_pagos
     * const Tipos_pagos = await prisma.tipos_pagos.create({
     *   data: {
     *     // ... data to create a Tipos_pagos
     *   }
     * })
     * 
    **/
    create<T extends tipos_pagosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tipos_pagosCreateArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tipos_pagos.
     *     @param {tipos_pagosCreateManyArgs} args - Arguments to create many Tipos_pagos.
     *     @example
     *     // Create many Tipos_pagos
     *     const tipos_pagos = await prisma.tipos_pagos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tipos_pagosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipos_pagosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tipos_pagos.
     * @param {tipos_pagosDeleteArgs} args - Arguments to delete one Tipos_pagos.
     * @example
     * // Delete one Tipos_pagos
     * const Tipos_pagos = await prisma.tipos_pagos.delete({
     *   where: {
     *     // ... filter to delete one Tipos_pagos
     *   }
     * })
     * 
    **/
    delete<T extends tipos_pagosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tipos_pagosDeleteArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tipos_pagos.
     * @param {tipos_pagosUpdateArgs} args - Arguments to update one Tipos_pagos.
     * @example
     * // Update one Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tipos_pagosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tipos_pagosUpdateArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tipos_pagos.
     * @param {tipos_pagosDeleteManyArgs} args - Arguments to filter Tipos_pagos to delete.
     * @example
     * // Delete a few Tipos_pagos
     * const { count } = await prisma.tipos_pagos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tipos_pagosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipos_pagosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tipos_pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipos_pagosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tipos_pagosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tipos_pagosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tipos_pagos.
     * @param {tipos_pagosUpsertArgs} args - Arguments to update or create a Tipos_pagos.
     * @example
     * // Update or create a Tipos_pagos
     * const tipos_pagos = await prisma.tipos_pagos.upsert({
     *   create: {
     *     // ... data to create a Tipos_pagos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tipos_pagos we want to update
     *   }
     * })
    **/
    upsert<T extends tipos_pagosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tipos_pagosUpsertArgs<ExtArgs>>
    ): Prisma__tipos_pagosClient<$Types.GetResult<tipos_pagosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tipos_pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipos_pagosCountArgs} args - Arguments to filter Tipos_pagos to count.
     * @example
     * // Count the number of Tipos_pagos
     * const count = await prisma.tipos_pagos.count({
     *   where: {
     *     // ... the filter for the Tipos_pagos we want to count
     *   }
     * })
    **/
    count<T extends tipos_pagosCountArgs>(
      args?: Subset<T, tipos_pagosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tipos_pagosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tipos_pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipos_pagosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tipos_pagosAggregateArgs>(args: Subset<T, Tipos_pagosAggregateArgs>): Prisma.PrismaPromise<GetTipos_pagosAggregateType<T>>

    /**
     * Group by Tipos_pagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipos_pagosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tipos_pagosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tipos_pagosGroupByArgs['orderBy'] }
        : { orderBy?: tipos_pagosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tipos_pagosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipos_pagosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tipos_pagos model
   */
  readonly fields: tipos_pagosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tipos_pagos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tipos_pagosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cajas_bancos<T extends tipos_pagos$cajas_bancosArgs<ExtArgs> = {}>(args?: Subset<T, tipos_pagos$cajas_bancosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'findMany'>| Null>;

    egresos_futuros<T extends tipos_pagos$egresos_futurosArgs<ExtArgs> = {}>(args?: Subset<T, tipos_pagos$egresos_futurosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findMany'>| Null>;

    ingresos_futuros<T extends tipos_pagos$ingresos_futurosArgs<ExtArgs> = {}>(args?: Subset<T, tipos_pagos$ingresos_futurosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the tipos_pagos model
   */ 
  interface tipos_pagosFieldRefs {
    readonly tipo_pago_id: FieldRef<"tipos_pagos", 'Int'>
    readonly tipo_pago: FieldRef<"tipos_pagos", 'String'>
  }
    

  // Custom InputTypes

  /**
   * tipos_pagos findUnique
   */
  export type tipos_pagosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * Filter, which tipos_pagos to fetch.
     */
    where: tipos_pagosWhereUniqueInput
  }


  /**
   * tipos_pagos findUniqueOrThrow
   */
  export type tipos_pagosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * Filter, which tipos_pagos to fetch.
     */
    where: tipos_pagosWhereUniqueInput
  }


  /**
   * tipos_pagos findFirst
   */
  export type tipos_pagosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * Filter, which tipos_pagos to fetch.
     */
    where?: tipos_pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipos_pagos to fetch.
     */
    orderBy?: tipos_pagosOrderByWithRelationInput | tipos_pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tipos_pagos.
     */
    cursor?: tipos_pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipos_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipos_pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tipos_pagos.
     */
    distinct?: Tipos_pagosScalarFieldEnum | Tipos_pagosScalarFieldEnum[]
  }


  /**
   * tipos_pagos findFirstOrThrow
   */
  export type tipos_pagosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * Filter, which tipos_pagos to fetch.
     */
    where?: tipos_pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipos_pagos to fetch.
     */
    orderBy?: tipos_pagosOrderByWithRelationInput | tipos_pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tipos_pagos.
     */
    cursor?: tipos_pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipos_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipos_pagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tipos_pagos.
     */
    distinct?: Tipos_pagosScalarFieldEnum | Tipos_pagosScalarFieldEnum[]
  }


  /**
   * tipos_pagos findMany
   */
  export type tipos_pagosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * Filter, which tipos_pagos to fetch.
     */
    where?: tipos_pagosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipos_pagos to fetch.
     */
    orderBy?: tipos_pagosOrderByWithRelationInput | tipos_pagosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tipos_pagos.
     */
    cursor?: tipos_pagosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipos_pagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipos_pagos.
     */
    skip?: number
    distinct?: Tipos_pagosScalarFieldEnum | Tipos_pagosScalarFieldEnum[]
  }


  /**
   * tipos_pagos create
   */
  export type tipos_pagosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * The data needed to create a tipos_pagos.
     */
    data: XOR<tipos_pagosCreateInput, tipos_pagosUncheckedCreateInput>
  }


  /**
   * tipos_pagos createMany
   */
  export type tipos_pagosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tipos_pagos.
     */
    data: tipos_pagosCreateManyInput | tipos_pagosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * tipos_pagos update
   */
  export type tipos_pagosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * The data needed to update a tipos_pagos.
     */
    data: XOR<tipos_pagosUpdateInput, tipos_pagosUncheckedUpdateInput>
    /**
     * Choose, which tipos_pagos to update.
     */
    where: tipos_pagosWhereUniqueInput
  }


  /**
   * tipos_pagos updateMany
   */
  export type tipos_pagosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tipos_pagos.
     */
    data: XOR<tipos_pagosUpdateManyMutationInput, tipos_pagosUncheckedUpdateManyInput>
    /**
     * Filter which tipos_pagos to update
     */
    where?: tipos_pagosWhereInput
  }


  /**
   * tipos_pagos upsert
   */
  export type tipos_pagosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * The filter to search for the tipos_pagos to update in case it exists.
     */
    where: tipos_pagosWhereUniqueInput
    /**
     * In case the tipos_pagos found by the `where` argument doesn't exist, create a new tipos_pagos with this data.
     */
    create: XOR<tipos_pagosCreateInput, tipos_pagosUncheckedCreateInput>
    /**
     * In case the tipos_pagos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tipos_pagosUpdateInput, tipos_pagosUncheckedUpdateInput>
  }


  /**
   * tipos_pagos delete
   */
  export type tipos_pagosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
    /**
     * Filter which tipos_pagos to delete.
     */
    where: tipos_pagosWhereUniqueInput
  }


  /**
   * tipos_pagos deleteMany
   */
  export type tipos_pagosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tipos_pagos to delete
     */
    where?: tipos_pagosWhereInput
  }


  /**
   * tipos_pagos.cajas_bancos
   */
  export type tipos_pagos$cajas_bancosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    where?: cajas_bancosWhereInput
    orderBy?: cajas_bancosOrderByWithRelationInput | cajas_bancosOrderByWithRelationInput[]
    cursor?: cajas_bancosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Cajas_bancosScalarFieldEnum | Cajas_bancosScalarFieldEnum[]
  }


  /**
   * tipos_pagos.egresos_futuros
   */
  export type tipos_pagos$egresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    where?: egresos_futurosWhereInput
    orderBy?: egresos_futurosOrderByWithRelationInput | egresos_futurosOrderByWithRelationInput[]
    cursor?: egresos_futurosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Egresos_futurosScalarFieldEnum | Egresos_futurosScalarFieldEnum[]
  }


  /**
   * tipos_pagos.ingresos_futuros
   */
  export type tipos_pagos$ingresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    where?: ingresos_futurosWhereInput
    orderBy?: ingresos_futurosOrderByWithRelationInput | ingresos_futurosOrderByWithRelationInput[]
    cursor?: ingresos_futurosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ingresos_futurosScalarFieldEnum | Ingresos_futurosScalarFieldEnum[]
  }


  /**
   * tipos_pagos without action
   */
  export type tipos_pagosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipos_pagos
     */
    select?: tipos_pagosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tipos_pagosInclude<ExtArgs> | null
  }



  /**
   * Model typesusers
   */


  export type AggregateTypesusers = {
    _count: TypesusersCountAggregateOutputType | null
    _avg: TypesusersAvgAggregateOutputType | null
    _sum: TypesusersSumAggregateOutputType | null
    _min: TypesusersMinAggregateOutputType | null
    _max: TypesusersMaxAggregateOutputType | null
  }

  export type TypesusersAvgAggregateOutputType = {
    typeuser_id: number | null
  }

  export type TypesusersSumAggregateOutputType = {
    typeuser_id: number | null
  }

  export type TypesusersMinAggregateOutputType = {
    typeuser_id: number | null
    typeuser: string | null
  }

  export type TypesusersMaxAggregateOutputType = {
    typeuser_id: number | null
    typeuser: string | null
  }

  export type TypesusersCountAggregateOutputType = {
    typeuser_id: number
    typeuser: number
    _all: number
  }


  export type TypesusersAvgAggregateInputType = {
    typeuser_id?: true
  }

  export type TypesusersSumAggregateInputType = {
    typeuser_id?: true
  }

  export type TypesusersMinAggregateInputType = {
    typeuser_id?: true
    typeuser?: true
  }

  export type TypesusersMaxAggregateInputType = {
    typeuser_id?: true
    typeuser?: true
  }

  export type TypesusersCountAggregateInputType = {
    typeuser_id?: true
    typeuser?: true
    _all?: true
  }

  export type TypesusersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which typesusers to aggregate.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: typesusersOrderByWithRelationInput | typesusersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned typesusers
    **/
    _count?: true | TypesusersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypesusersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypesusersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypesusersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypesusersMaxAggregateInputType
  }

  export type GetTypesusersAggregateType<T extends TypesusersAggregateArgs> = {
        [P in keyof T & keyof AggregateTypesusers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypesusers[P]>
      : GetScalarType<T[P], AggregateTypesusers[P]>
  }




  export type typesusersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: typesusersWhereInput
    orderBy?: typesusersOrderByWithAggregationInput | typesusersOrderByWithAggregationInput[]
    by: TypesusersScalarFieldEnum[] | TypesusersScalarFieldEnum
    having?: typesusersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypesusersCountAggregateInputType | true
    _avg?: TypesusersAvgAggregateInputType
    _sum?: TypesusersSumAggregateInputType
    _min?: TypesusersMinAggregateInputType
    _max?: TypesusersMaxAggregateInputType
  }


  export type TypesusersGroupByOutputType = {
    typeuser_id: number
    typeuser: string
    _count: TypesusersCountAggregateOutputType | null
    _avg: TypesusersAvgAggregateOutputType | null
    _sum: TypesusersSumAggregateOutputType | null
    _min: TypesusersMinAggregateOutputType | null
    _max: TypesusersMaxAggregateOutputType | null
  }

  type GetTypesusersGroupByPayload<T extends typesusersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypesusersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypesusersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypesusersGroupByOutputType[P]>
            : GetScalarType<T[P], TypesusersGroupByOutputType[P]>
        }
      >
    >


  export type typesusersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    typeuser_id?: boolean
    typeuser?: boolean
    users?: boolean | typesusers$usersArgs<ExtArgs>
    _count?: boolean | TypesusersCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["typesusers"]>

  export type typesusersSelectScalar = {
    typeuser_id?: boolean
    typeuser?: boolean
  }

  export type typesusersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | typesusers$usersArgs<ExtArgs>
    _count?: boolean | TypesusersCountOutputTypeArgs<ExtArgs>
  }


  type typesusersGetPayload<S extends boolean | null | undefined | typesusersArgs> = $Types.GetResult<typesusersPayload, S>

  type typesusersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<typesusersFindManyArgs, 'select' | 'include'> & {
      select?: TypesusersCountAggregateInputType | true
    }

  export interface typesusersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['typesusers'], meta: { name: 'typesusers' } }
    /**
     * Find zero or one Typesusers that matches the filter.
     * @param {typesusersFindUniqueArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends typesusersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, typesusersFindUniqueArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Typesusers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {typesusersFindUniqueOrThrowArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends typesusersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, typesusersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Typesusers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersFindFirstArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends typesusersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, typesusersFindFirstArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Typesusers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersFindFirstOrThrowArgs} args - Arguments to find a Typesusers
     * @example
     * // Get one Typesusers
     * const typesusers = await prisma.typesusers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends typesusersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, typesusersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Typesusers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Typesusers
     * const typesusers = await prisma.typesusers.findMany()
     * 
     * // Get first 10 Typesusers
     * const typesusers = await prisma.typesusers.findMany({ take: 10 })
     * 
     * // Only select the `typeuser_id`
     * const typesusersWithTypeuser_idOnly = await prisma.typesusers.findMany({ select: { typeuser_id: true } })
     * 
    **/
    findMany<T extends typesusersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, typesusersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Typesusers.
     * @param {typesusersCreateArgs} args - Arguments to create a Typesusers.
     * @example
     * // Create one Typesusers
     * const Typesusers = await prisma.typesusers.create({
     *   data: {
     *     // ... data to create a Typesusers
     *   }
     * })
     * 
    **/
    create<T extends typesusersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, typesusersCreateArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Typesusers.
     *     @param {typesusersCreateManyArgs} args - Arguments to create many Typesusers.
     *     @example
     *     // Create many Typesusers
     *     const typesusers = await prisma.typesusers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends typesusersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, typesusersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Typesusers.
     * @param {typesusersDeleteArgs} args - Arguments to delete one Typesusers.
     * @example
     * // Delete one Typesusers
     * const Typesusers = await prisma.typesusers.delete({
     *   where: {
     *     // ... filter to delete one Typesusers
     *   }
     * })
     * 
    **/
    delete<T extends typesusersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, typesusersDeleteArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Typesusers.
     * @param {typesusersUpdateArgs} args - Arguments to update one Typesusers.
     * @example
     * // Update one Typesusers
     * const typesusers = await prisma.typesusers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends typesusersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, typesusersUpdateArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Typesusers.
     * @param {typesusersDeleteManyArgs} args - Arguments to filter Typesusers to delete.
     * @example
     * // Delete a few Typesusers
     * const { count } = await prisma.typesusers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends typesusersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, typesusersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Typesusers
     * const typesusers = await prisma.typesusers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends typesusersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, typesusersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Typesusers.
     * @param {typesusersUpsertArgs} args - Arguments to update or create a Typesusers.
     * @example
     * // Update or create a Typesusers
     * const typesusers = await prisma.typesusers.upsert({
     *   create: {
     *     // ... data to create a Typesusers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Typesusers we want to update
     *   }
     * })
    **/
    upsert<T extends typesusersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, typesusersUpsertArgs<ExtArgs>>
    ): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersCountArgs} args - Arguments to filter Typesusers to count.
     * @example
     * // Count the number of Typesusers
     * const count = await prisma.typesusers.count({
     *   where: {
     *     // ... the filter for the Typesusers we want to count
     *   }
     * })
    **/
    count<T extends typesusersCountArgs>(
      args?: Subset<T, typesusersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypesusersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypesusersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypesusersAggregateArgs>(args: Subset<T, TypesusersAggregateArgs>): Prisma.PrismaPromise<GetTypesusersAggregateType<T>>

    /**
     * Group by Typesusers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typesusersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends typesusersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: typesusersGroupByArgs['orderBy'] }
        : { orderBy?: typesusersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, typesusersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypesusersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the typesusers model
   */
  readonly fields: typesusersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for typesusers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__typesusersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends typesusers$usersArgs<ExtArgs> = {}>(args?: Subset<T, typesusers$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<usersPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the typesusers model
   */ 
  interface typesusersFieldRefs {
    readonly typeuser_id: FieldRef<"typesusers", 'Int'>
    readonly typeuser: FieldRef<"typesusers", 'String'>
  }
    

  // Custom InputTypes

  /**
   * typesusers findUnique
   */
  export type typesusersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * Filter, which typesusers to fetch.
     */
    where: typesusersWhereUniqueInput
  }


  /**
   * typesusers findUniqueOrThrow
   */
  export type typesusersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * Filter, which typesusers to fetch.
     */
    where: typesusersWhereUniqueInput
  }


  /**
   * typesusers findFirst
   */
  export type typesusersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * Filter, which typesusers to fetch.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: typesusersOrderByWithRelationInput | typesusersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for typesusers.
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of typesusers.
     */
    distinct?: TypesusersScalarFieldEnum | TypesusersScalarFieldEnum[]
  }


  /**
   * typesusers findFirstOrThrow
   */
  export type typesusersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * Filter, which typesusers to fetch.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: typesusersOrderByWithRelationInput | typesusersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for typesusers.
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of typesusers.
     */
    distinct?: TypesusersScalarFieldEnum | TypesusersScalarFieldEnum[]
  }


  /**
   * typesusers findMany
   */
  export type typesusersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * Filter, which typesusers to fetch.
     */
    where?: typesusersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typesusers to fetch.
     */
    orderBy?: typesusersOrderByWithRelationInput | typesusersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing typesusers.
     */
    cursor?: typesusersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typesusers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typesusers.
     */
    skip?: number
    distinct?: TypesusersScalarFieldEnum | TypesusersScalarFieldEnum[]
  }


  /**
   * typesusers create
   */
  export type typesusersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * The data needed to create a typesusers.
     */
    data: XOR<typesusersCreateInput, typesusersUncheckedCreateInput>
  }


  /**
   * typesusers createMany
   */
  export type typesusersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many typesusers.
     */
    data: typesusersCreateManyInput | typesusersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * typesusers update
   */
  export type typesusersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * The data needed to update a typesusers.
     */
    data: XOR<typesusersUpdateInput, typesusersUncheckedUpdateInput>
    /**
     * Choose, which typesusers to update.
     */
    where: typesusersWhereUniqueInput
  }


  /**
   * typesusers updateMany
   */
  export type typesusersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update typesusers.
     */
    data: XOR<typesusersUpdateManyMutationInput, typesusersUncheckedUpdateManyInput>
    /**
     * Filter which typesusers to update
     */
    where?: typesusersWhereInput
  }


  /**
   * typesusers upsert
   */
  export type typesusersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * The filter to search for the typesusers to update in case it exists.
     */
    where: typesusersWhereUniqueInput
    /**
     * In case the typesusers found by the `where` argument doesn't exist, create a new typesusers with this data.
     */
    create: XOR<typesusersCreateInput, typesusersUncheckedCreateInput>
    /**
     * In case the typesusers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<typesusersUpdateInput, typesusersUncheckedUpdateInput>
  }


  /**
   * typesusers delete
   */
  export type typesusersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
    /**
     * Filter which typesusers to delete.
     */
    where: typesusersWhereUniqueInput
  }


  /**
   * typesusers deleteMany
   */
  export type typesusersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which typesusers to delete
     */
    where?: typesusersWhereInput
  }


  /**
   * typesusers.users
   */
  export type typesusers$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * typesusers without action
   */
  export type typesusersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typesusers
     */
    select?: typesusersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typesusersInclude<ExtArgs> | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
    typeuser_id: number | null
    activo: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
    typeuser_id: number | null
    activo: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    email: string | null
    password: string | null
    typeuser_id: number | null
    activo: number | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    email: string | null
    password: string | null
    typeuser_id: number | null
    activo: number | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    email: number
    password: number
    typeuser_id: number
    activo: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
    typeuser_id?: true
    activo?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
    typeuser_id?: true
    activo?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    email?: true
    password?: true
    typeuser_id?: true
    activo?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    email?: true
    password?: true
    typeuser_id?: true
    activo?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    email?: true
    password?: true
    typeuser_id?: true
    activo?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    user_id: number
    email: string
    password: string
    typeuser_id: number
    activo: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    email?: boolean
    password?: boolean
    typeuser_id?: boolean
    activo?: boolean
    cajas_bancos?: boolean | users$cajas_bancosArgs<ExtArgs>
    clientes?: boolean | users$clientesArgs<ExtArgs>
    egresos_futuros?: boolean | users$egresos_futurosArgs<ExtArgs>
    ingresos_futuros?: boolean | users$ingresos_futurosArgs<ExtArgs>
    typesusers?: boolean | typesusersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    user_id?: boolean
    email?: boolean
    password?: boolean
    typeuser_id?: boolean
    activo?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cajas_bancos?: boolean | users$cajas_bancosArgs<ExtArgs>
    clientes?: boolean | users$clientesArgs<ExtArgs>
    egresos_futuros?: boolean | users$egresos_futurosArgs<ExtArgs>
    ingresos_futuros?: boolean | users$ingresos_futurosArgs<ExtArgs>
    typesusers?: boolean | typesusersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }


  type usersGetPayload<S extends boolean | null | undefined | usersArgs> = $Types.GetResult<usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Types.GetResult<usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cajas_bancos<T extends users$cajas_bancosArgs<ExtArgs> = {}>(args?: Subset<T, users$cajas_bancosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<cajas_bancosPayload<ExtArgs>, T, 'findMany'>| Null>;

    clientes<T extends users$clientesArgs<ExtArgs> = {}>(args?: Subset<T, users$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findMany'>| Null>;

    egresos_futuros<T extends users$egresos_futurosArgs<ExtArgs> = {}>(args?: Subset<T, users$egresos_futurosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<egresos_futurosPayload<ExtArgs>, T, 'findMany'>| Null>;

    ingresos_futuros<T extends users$ingresos_futurosArgs<ExtArgs> = {}>(args?: Subset<T, users$ingresos_futurosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ingresos_futurosPayload<ExtArgs>, T, 'findMany'>| Null>;

    typesusers<T extends typesusersArgs<ExtArgs> = {}>(args?: Subset<T, typesusersArgs<ExtArgs>>): Prisma__typesusersClient<$Types.GetResult<typesusersPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly user_id: FieldRef<"users", 'Int'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly typeuser_id: FieldRef<"users", 'Int'>
    readonly activo: FieldRef<"users", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.cajas_bancos
   */
  export type users$cajas_bancosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cajas_bancos
     */
    select?: cajas_bancosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cajas_bancosInclude<ExtArgs> | null
    where?: cajas_bancosWhereInput
    orderBy?: cajas_bancosOrderByWithRelationInput | cajas_bancosOrderByWithRelationInput[]
    cursor?: cajas_bancosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Cajas_bancosScalarFieldEnum | Cajas_bancosScalarFieldEnum[]
  }


  /**
   * users.clientes
   */
  export type users$clientesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientesInclude<ExtArgs> | null
    where?: clientesWhereInput
    orderBy?: clientesOrderByWithRelationInput | clientesOrderByWithRelationInput[]
    cursor?: clientesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientesScalarFieldEnum | ClientesScalarFieldEnum[]
  }


  /**
   * users.egresos_futuros
   */
  export type users$egresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the egresos_futuros
     */
    select?: egresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: egresos_futurosInclude<ExtArgs> | null
    where?: egresos_futurosWhereInput
    orderBy?: egresos_futurosOrderByWithRelationInput | egresos_futurosOrderByWithRelationInput[]
    cursor?: egresos_futurosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Egresos_futurosScalarFieldEnum | Egresos_futurosScalarFieldEnum[]
  }


  /**
   * users.ingresos_futuros
   */
  export type users$ingresos_futurosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ingresos_futuros
     */
    select?: ingresos_futurosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ingresos_futurosInclude<ExtArgs> | null
    where?: ingresos_futurosWhereInput
    orderBy?: ingresos_futurosOrderByWithRelationInput | ingresos_futurosOrderByWithRelationInput[]
    cursor?: ingresos_futurosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ingresos_futurosScalarFieldEnum | Ingresos_futurosScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Cajas_bancosScalarFieldEnum: {
    cajas_bancos_id: 'cajas_bancos_id',
    nombre_cuenta: 'nombre_cuenta',
    tipo_pago_id: 'tipo_pago_id',
    cantidad_actual: 'cantidad_actual',
    user_id: 'user_id',
    activo: 'activo'
  };

  export type Cajas_bancosScalarFieldEnum = (typeof Cajas_bancosScalarFieldEnum)[keyof typeof Cajas_bancosScalarFieldEnum]


  export const CategoriasScalarFieldEnum: {
    categoria_id: 'categoria_id',
    categoria: 'categoria'
  };

  export type CategoriasScalarFieldEnum = (typeof CategoriasScalarFieldEnum)[keyof typeof CategoriasScalarFieldEnum]


  export const ClientesScalarFieldEnum: {
    cliente_id: 'cliente_id',
    nombre: 'nombre',
    apellido: 'apellido',
    puesto: 'puesto',
    celular: 'celular',
    empresa: 'empresa',
    dedica_empresa: 'dedica_empresa',
    num_empleados: 'num_empleados',
    fecha: 'fecha',
    user_id: 'user_id',
    activo: 'activo'
  };

  export type ClientesScalarFieldEnum = (typeof ClientesScalarFieldEnum)[keyof typeof ClientesScalarFieldEnum]


  export const Egresos_futurosScalarFieldEnum: {
    egresos_futuros_id: 'egresos_futuros_id',
    nombre_persona_empresa: 'nombre_persona_empresa',
    concepto: 'concepto',
    tipo_pago_id: 'tipo_pago_id',
    categoria_id: 'categoria_id',
    monto: 'monto',
    fecha_tentativa_pago: 'fecha_tentativa_pago',
    user_id: 'user_id',
    activo: 'activo'
  };

  export type Egresos_futurosScalarFieldEnum = (typeof Egresos_futurosScalarFieldEnum)[keyof typeof Egresos_futurosScalarFieldEnum]


  export const Ingresos_futurosScalarFieldEnum: {
    ingresos_futuros_id: 'ingresos_futuros_id',
    nombre_persona_empresa: 'nombre_persona_empresa',
    concepto: 'concepto',
    tipo_pago_id: 'tipo_pago_id',
    categoria_id: 'categoria_id',
    monto: 'monto',
    fecha_tentativa_cobro: 'fecha_tentativa_cobro',
    user_id: 'user_id',
    activo: 'activo'
  };

  export type Ingresos_futurosScalarFieldEnum = (typeof Ingresos_futurosScalarFieldEnum)[keyof typeof Ingresos_futurosScalarFieldEnum]


  export const Tipos_pagosScalarFieldEnum: {
    tipo_pago_id: 'tipo_pago_id',
    tipo_pago: 'tipo_pago'
  };

  export type Tipos_pagosScalarFieldEnum = (typeof Tipos_pagosScalarFieldEnum)[keyof typeof Tipos_pagosScalarFieldEnum]


  export const TypesusersScalarFieldEnum: {
    typeuser_id: 'typeuser_id',
    typeuser: 'typeuser'
  };

  export type TypesusersScalarFieldEnum = (typeof TypesusersScalarFieldEnum)[keyof typeof TypesusersScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    email: 'email',
    password: 'password',
    typeuser_id: 'typeuser_id',
    activo: 'activo'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type cajas_bancosWhereInput = {
    AND?: cajas_bancosWhereInput | cajas_bancosWhereInput[]
    OR?: cajas_bancosWhereInput[]
    NOT?: cajas_bancosWhereInput | cajas_bancosWhereInput[]
    cajas_bancos_id?: IntFilter<"cajas_bancos"> | number
    nombre_cuenta?: StringFilter<"cajas_bancos"> | string
    tipo_pago_id?: IntFilter<"cajas_bancos"> | number
    cantidad_actual?: IntFilter<"cajas_bancos"> | number
    user_id?: IntFilter<"cajas_bancos"> | number
    activo?: IntFilter<"cajas_bancos"> | number
    tipos_pagos?: XOR<Tipos_pagosRelationFilter, tipos_pagosWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type cajas_bancosOrderByWithRelationInput = {
    cajas_bancos_id?: SortOrder
    nombre_cuenta?: SortOrder
    tipo_pago_id?: SortOrder
    cantidad_actual?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    tipos_pagos?: tipos_pagosOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type cajas_bancosWhereUniqueInput = Prisma.AtLeast<{
    cajas_bancos_id?: number
    AND?: cajas_bancosWhereInput | cajas_bancosWhereInput[]
    OR?: cajas_bancosWhereInput[]
    NOT?: cajas_bancosWhereInput | cajas_bancosWhereInput[]
    nombre_cuenta?: StringFilter<"cajas_bancos"> | string
    tipo_pago_id?: IntFilter<"cajas_bancos"> | number
    cantidad_actual?: IntFilter<"cajas_bancos"> | number
    user_id?: IntFilter<"cajas_bancos"> | number
    activo?: IntFilter<"cajas_bancos"> | number
    tipos_pagos?: XOR<Tipos_pagosRelationFilter, tipos_pagosWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "cajas_bancos_id">

  export type cajas_bancosOrderByWithAggregationInput = {
    cajas_bancos_id?: SortOrder
    nombre_cuenta?: SortOrder
    tipo_pago_id?: SortOrder
    cantidad_actual?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    _count?: cajas_bancosCountOrderByAggregateInput
    _avg?: cajas_bancosAvgOrderByAggregateInput
    _max?: cajas_bancosMaxOrderByAggregateInput
    _min?: cajas_bancosMinOrderByAggregateInput
    _sum?: cajas_bancosSumOrderByAggregateInput
  }

  export type cajas_bancosScalarWhereWithAggregatesInput = {
    AND?: cajas_bancosScalarWhereWithAggregatesInput | cajas_bancosScalarWhereWithAggregatesInput[]
    OR?: cajas_bancosScalarWhereWithAggregatesInput[]
    NOT?: cajas_bancosScalarWhereWithAggregatesInput | cajas_bancosScalarWhereWithAggregatesInput[]
    cajas_bancos_id?: IntWithAggregatesFilter<"cajas_bancos"> | number
    nombre_cuenta?: StringWithAggregatesFilter<"cajas_bancos"> | string
    tipo_pago_id?: IntWithAggregatesFilter<"cajas_bancos"> | number
    cantidad_actual?: IntWithAggregatesFilter<"cajas_bancos"> | number
    user_id?: IntWithAggregatesFilter<"cajas_bancos"> | number
    activo?: IntWithAggregatesFilter<"cajas_bancos"> | number
  }

  export type categoriasWhereInput = {
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    categoria_id?: IntFilter<"categorias"> | number
    categoria?: StringFilter<"categorias"> | string
    egresos_futuros?: Egresos_futurosListRelationFilter
    ingresos_futuros?: Ingresos_futurosListRelationFilter
  }

  export type categoriasOrderByWithRelationInput = {
    categoria_id?: SortOrder
    categoria?: SortOrder
    egresos_futuros?: egresos_futurosOrderByRelationAggregateInput
    ingresos_futuros?: ingresos_futurosOrderByRelationAggregateInput
  }

  export type categoriasWhereUniqueInput = Prisma.AtLeast<{
    categoria_id?: number
    AND?: categoriasWhereInput | categoriasWhereInput[]
    OR?: categoriasWhereInput[]
    NOT?: categoriasWhereInput | categoriasWhereInput[]
    categoria?: StringFilter<"categorias"> | string
    egresos_futuros?: Egresos_futurosListRelationFilter
    ingresos_futuros?: Ingresos_futurosListRelationFilter
  }, "categoria_id">

  export type categoriasOrderByWithAggregationInput = {
    categoria_id?: SortOrder
    categoria?: SortOrder
    _count?: categoriasCountOrderByAggregateInput
    _avg?: categoriasAvgOrderByAggregateInput
    _max?: categoriasMaxOrderByAggregateInput
    _min?: categoriasMinOrderByAggregateInput
    _sum?: categoriasSumOrderByAggregateInput
  }

  export type categoriasScalarWhereWithAggregatesInput = {
    AND?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    OR?: categoriasScalarWhereWithAggregatesInput[]
    NOT?: categoriasScalarWhereWithAggregatesInput | categoriasScalarWhereWithAggregatesInput[]
    categoria_id?: IntWithAggregatesFilter<"categorias"> | number
    categoria?: StringWithAggregatesFilter<"categorias"> | string
  }

  export type clientesWhereInput = {
    AND?: clientesWhereInput | clientesWhereInput[]
    OR?: clientesWhereInput[]
    NOT?: clientesWhereInput | clientesWhereInput[]
    cliente_id?: IntFilter<"clientes"> | number
    nombre?: StringFilter<"clientes"> | string
    apellido?: StringFilter<"clientes"> | string
    puesto?: StringFilter<"clientes"> | string
    celular?: StringNullableFilter<"clientes"> | string | null
    empresa?: StringFilter<"clientes"> | string
    dedica_empresa?: StringFilter<"clientes"> | string
    num_empleados?: IntFilter<"clientes"> | number
    fecha?: DateTimeFilter<"clientes"> | Date | string
    user_id?: IntFilter<"clientes"> | number
    activo?: IntFilter<"clientes"> | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type clientesOrderByWithRelationInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    puesto?: SortOrder
    celular?: SortOrderInput | SortOrder
    empresa?: SortOrder
    dedica_empresa?: SortOrder
    num_empleados?: SortOrder
    fecha?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type clientesWhereUniqueInput = Prisma.AtLeast<{
    cliente_id?: number
    AND?: clientesWhereInput | clientesWhereInput[]
    OR?: clientesWhereInput[]
    NOT?: clientesWhereInput | clientesWhereInput[]
    nombre?: StringFilter<"clientes"> | string
    apellido?: StringFilter<"clientes"> | string
    puesto?: StringFilter<"clientes"> | string
    celular?: StringNullableFilter<"clientes"> | string | null
    empresa?: StringFilter<"clientes"> | string
    dedica_empresa?: StringFilter<"clientes"> | string
    num_empleados?: IntFilter<"clientes"> | number
    fecha?: DateTimeFilter<"clientes"> | Date | string
    user_id?: IntFilter<"clientes"> | number
    activo?: IntFilter<"clientes"> | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "cliente_id">

  export type clientesOrderByWithAggregationInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    puesto?: SortOrder
    celular?: SortOrderInput | SortOrder
    empresa?: SortOrder
    dedica_empresa?: SortOrder
    num_empleados?: SortOrder
    fecha?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    _count?: clientesCountOrderByAggregateInput
    _avg?: clientesAvgOrderByAggregateInput
    _max?: clientesMaxOrderByAggregateInput
    _min?: clientesMinOrderByAggregateInput
    _sum?: clientesSumOrderByAggregateInput
  }

  export type clientesScalarWhereWithAggregatesInput = {
    AND?: clientesScalarWhereWithAggregatesInput | clientesScalarWhereWithAggregatesInput[]
    OR?: clientesScalarWhereWithAggregatesInput[]
    NOT?: clientesScalarWhereWithAggregatesInput | clientesScalarWhereWithAggregatesInput[]
    cliente_id?: IntWithAggregatesFilter<"clientes"> | number
    nombre?: StringWithAggregatesFilter<"clientes"> | string
    apellido?: StringWithAggregatesFilter<"clientes"> | string
    puesto?: StringWithAggregatesFilter<"clientes"> | string
    celular?: StringNullableWithAggregatesFilter<"clientes"> | string | null
    empresa?: StringWithAggregatesFilter<"clientes"> | string
    dedica_empresa?: StringWithAggregatesFilter<"clientes"> | string
    num_empleados?: IntWithAggregatesFilter<"clientes"> | number
    fecha?: DateTimeWithAggregatesFilter<"clientes"> | Date | string
    user_id?: IntWithAggregatesFilter<"clientes"> | number
    activo?: IntWithAggregatesFilter<"clientes"> | number
  }

  export type egresos_futurosWhereInput = {
    AND?: egresos_futurosWhereInput | egresos_futurosWhereInput[]
    OR?: egresos_futurosWhereInput[]
    NOT?: egresos_futurosWhereInput | egresos_futurosWhereInput[]
    egresos_futuros_id?: IntFilter<"egresos_futuros"> | number
    nombre_persona_empresa?: StringFilter<"egresos_futuros"> | string
    concepto?: StringFilter<"egresos_futuros"> | string
    tipo_pago_id?: IntFilter<"egresos_futuros"> | number
    categoria_id?: IntFilter<"egresos_futuros"> | number
    monto?: IntFilter<"egresos_futuros"> | number
    fecha_tentativa_pago?: DateTimeFilter<"egresos_futuros"> | Date | string
    user_id?: IntFilter<"egresos_futuros"> | number
    activo?: BoolFilter<"egresos_futuros"> | boolean
    categorias?: XOR<CategoriasRelationFilter, categoriasWhereInput>
    tipos_pagos?: XOR<Tipos_pagosRelationFilter, tipos_pagosWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type egresos_futurosOrderByWithRelationInput = {
    egresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_pago?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    categorias?: categoriasOrderByWithRelationInput
    tipos_pagos?: tipos_pagosOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type egresos_futurosWhereUniqueInput = Prisma.AtLeast<{
    egresos_futuros_id?: number
    AND?: egresos_futurosWhereInput | egresos_futurosWhereInput[]
    OR?: egresos_futurosWhereInput[]
    NOT?: egresos_futurosWhereInput | egresos_futurosWhereInput[]
    nombre_persona_empresa?: StringFilter<"egresos_futuros"> | string
    concepto?: StringFilter<"egresos_futuros"> | string
    tipo_pago_id?: IntFilter<"egresos_futuros"> | number
    categoria_id?: IntFilter<"egresos_futuros"> | number
    monto?: IntFilter<"egresos_futuros"> | number
    fecha_tentativa_pago?: DateTimeFilter<"egresos_futuros"> | Date | string
    user_id?: IntFilter<"egresos_futuros"> | number
    activo?: BoolFilter<"egresos_futuros"> | boolean
    categorias?: XOR<CategoriasRelationFilter, categoriasWhereInput>
    tipos_pagos?: XOR<Tipos_pagosRelationFilter, tipos_pagosWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "egresos_futuros_id">

  export type egresos_futurosOrderByWithAggregationInput = {
    egresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_pago?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    _count?: egresos_futurosCountOrderByAggregateInput
    _avg?: egresos_futurosAvgOrderByAggregateInput
    _max?: egresos_futurosMaxOrderByAggregateInput
    _min?: egresos_futurosMinOrderByAggregateInput
    _sum?: egresos_futurosSumOrderByAggregateInput
  }

  export type egresos_futurosScalarWhereWithAggregatesInput = {
    AND?: egresos_futurosScalarWhereWithAggregatesInput | egresos_futurosScalarWhereWithAggregatesInput[]
    OR?: egresos_futurosScalarWhereWithAggregatesInput[]
    NOT?: egresos_futurosScalarWhereWithAggregatesInput | egresos_futurosScalarWhereWithAggregatesInput[]
    egresos_futuros_id?: IntWithAggregatesFilter<"egresos_futuros"> | number
    nombre_persona_empresa?: StringWithAggregatesFilter<"egresos_futuros"> | string
    concepto?: StringWithAggregatesFilter<"egresos_futuros"> | string
    tipo_pago_id?: IntWithAggregatesFilter<"egresos_futuros"> | number
    categoria_id?: IntWithAggregatesFilter<"egresos_futuros"> | number
    monto?: IntWithAggregatesFilter<"egresos_futuros"> | number
    fecha_tentativa_pago?: DateTimeWithAggregatesFilter<"egresos_futuros"> | Date | string
    user_id?: IntWithAggregatesFilter<"egresos_futuros"> | number
    activo?: BoolWithAggregatesFilter<"egresos_futuros"> | boolean
  }

  export type ingresos_futurosWhereInput = {
    AND?: ingresos_futurosWhereInput | ingresos_futurosWhereInput[]
    OR?: ingresos_futurosWhereInput[]
    NOT?: ingresos_futurosWhereInput | ingresos_futurosWhereInput[]
    ingresos_futuros_id?: IntFilter<"ingresos_futuros"> | number
    nombre_persona_empresa?: StringFilter<"ingresos_futuros"> | string
    concepto?: StringFilter<"ingresos_futuros"> | string
    tipo_pago_id?: IntFilter<"ingresos_futuros"> | number
    categoria_id?: IntFilter<"ingresos_futuros"> | number
    monto?: IntFilter<"ingresos_futuros"> | number
    fecha_tentativa_cobro?: DateTimeFilter<"ingresos_futuros"> | Date | string
    user_id?: IntFilter<"ingresos_futuros"> | number
    activo?: BoolFilter<"ingresos_futuros"> | boolean
    categorias?: XOR<CategoriasRelationFilter, categoriasWhereInput>
    tipos_pagos?: XOR<Tipos_pagosRelationFilter, tipos_pagosWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type ingresos_futurosOrderByWithRelationInput = {
    ingresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_cobro?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    categorias?: categoriasOrderByWithRelationInput
    tipos_pagos?: tipos_pagosOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type ingresos_futurosWhereUniqueInput = Prisma.AtLeast<{
    ingresos_futuros_id?: number
    AND?: ingresos_futurosWhereInput | ingresos_futurosWhereInput[]
    OR?: ingresos_futurosWhereInput[]
    NOT?: ingresos_futurosWhereInput | ingresos_futurosWhereInput[]
    nombre_persona_empresa?: StringFilter<"ingresos_futuros"> | string
    concepto?: StringFilter<"ingresos_futuros"> | string
    tipo_pago_id?: IntFilter<"ingresos_futuros"> | number
    categoria_id?: IntFilter<"ingresos_futuros"> | number
    monto?: IntFilter<"ingresos_futuros"> | number
    fecha_tentativa_cobro?: DateTimeFilter<"ingresos_futuros"> | Date | string
    user_id?: IntFilter<"ingresos_futuros"> | number
    activo?: BoolFilter<"ingresos_futuros"> | boolean
    categorias?: XOR<CategoriasRelationFilter, categoriasWhereInput>
    tipos_pagos?: XOR<Tipos_pagosRelationFilter, tipos_pagosWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "ingresos_futuros_id">

  export type ingresos_futurosOrderByWithAggregationInput = {
    ingresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_cobro?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
    _count?: ingresos_futurosCountOrderByAggregateInput
    _avg?: ingresos_futurosAvgOrderByAggregateInput
    _max?: ingresos_futurosMaxOrderByAggregateInput
    _min?: ingresos_futurosMinOrderByAggregateInput
    _sum?: ingresos_futurosSumOrderByAggregateInput
  }

  export type ingresos_futurosScalarWhereWithAggregatesInput = {
    AND?: ingresos_futurosScalarWhereWithAggregatesInput | ingresos_futurosScalarWhereWithAggregatesInput[]
    OR?: ingresos_futurosScalarWhereWithAggregatesInput[]
    NOT?: ingresos_futurosScalarWhereWithAggregatesInput | ingresos_futurosScalarWhereWithAggregatesInput[]
    ingresos_futuros_id?: IntWithAggregatesFilter<"ingresos_futuros"> | number
    nombre_persona_empresa?: StringWithAggregatesFilter<"ingresos_futuros"> | string
    concepto?: StringWithAggregatesFilter<"ingresos_futuros"> | string
    tipo_pago_id?: IntWithAggregatesFilter<"ingresos_futuros"> | number
    categoria_id?: IntWithAggregatesFilter<"ingresos_futuros"> | number
    monto?: IntWithAggregatesFilter<"ingresos_futuros"> | number
    fecha_tentativa_cobro?: DateTimeWithAggregatesFilter<"ingresos_futuros"> | Date | string
    user_id?: IntWithAggregatesFilter<"ingresos_futuros"> | number
    activo?: BoolWithAggregatesFilter<"ingresos_futuros"> | boolean
  }

  export type tipos_pagosWhereInput = {
    AND?: tipos_pagosWhereInput | tipos_pagosWhereInput[]
    OR?: tipos_pagosWhereInput[]
    NOT?: tipos_pagosWhereInput | tipos_pagosWhereInput[]
    tipo_pago_id?: IntFilter<"tipos_pagos"> | number
    tipo_pago?: StringFilter<"tipos_pagos"> | string
    cajas_bancos?: Cajas_bancosListRelationFilter
    egresos_futuros?: Egresos_futurosListRelationFilter
    ingresos_futuros?: Ingresos_futurosListRelationFilter
  }

  export type tipos_pagosOrderByWithRelationInput = {
    tipo_pago_id?: SortOrder
    tipo_pago?: SortOrder
    cajas_bancos?: cajas_bancosOrderByRelationAggregateInput
    egresos_futuros?: egresos_futurosOrderByRelationAggregateInput
    ingresos_futuros?: ingresos_futurosOrderByRelationAggregateInput
  }

  export type tipos_pagosWhereUniqueInput = Prisma.AtLeast<{
    tipo_pago_id?: number
    AND?: tipos_pagosWhereInput | tipos_pagosWhereInput[]
    OR?: tipos_pagosWhereInput[]
    NOT?: tipos_pagosWhereInput | tipos_pagosWhereInput[]
    tipo_pago?: StringFilter<"tipos_pagos"> | string
    cajas_bancos?: Cajas_bancosListRelationFilter
    egresos_futuros?: Egresos_futurosListRelationFilter
    ingresos_futuros?: Ingresos_futurosListRelationFilter
  }, "tipo_pago_id">

  export type tipos_pagosOrderByWithAggregationInput = {
    tipo_pago_id?: SortOrder
    tipo_pago?: SortOrder
    _count?: tipos_pagosCountOrderByAggregateInput
    _avg?: tipos_pagosAvgOrderByAggregateInput
    _max?: tipos_pagosMaxOrderByAggregateInput
    _min?: tipos_pagosMinOrderByAggregateInput
    _sum?: tipos_pagosSumOrderByAggregateInput
  }

  export type tipos_pagosScalarWhereWithAggregatesInput = {
    AND?: tipos_pagosScalarWhereWithAggregatesInput | tipos_pagosScalarWhereWithAggregatesInput[]
    OR?: tipos_pagosScalarWhereWithAggregatesInput[]
    NOT?: tipos_pagosScalarWhereWithAggregatesInput | tipos_pagosScalarWhereWithAggregatesInput[]
    tipo_pago_id?: IntWithAggregatesFilter<"tipos_pagos"> | number
    tipo_pago?: StringWithAggregatesFilter<"tipos_pagos"> | string
  }

  export type typesusersWhereInput = {
    AND?: typesusersWhereInput | typesusersWhereInput[]
    OR?: typesusersWhereInput[]
    NOT?: typesusersWhereInput | typesusersWhereInput[]
    typeuser_id?: IntFilter<"typesusers"> | number
    typeuser?: StringFilter<"typesusers"> | string
    users?: UsersListRelationFilter
  }

  export type typesusersOrderByWithRelationInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
    users?: usersOrderByRelationAggregateInput
  }

  export type typesusersWhereUniqueInput = Prisma.AtLeast<{
    typeuser_id?: number
    AND?: typesusersWhereInput | typesusersWhereInput[]
    OR?: typesusersWhereInput[]
    NOT?: typesusersWhereInput | typesusersWhereInput[]
    typeuser?: StringFilter<"typesusers"> | string
    users?: UsersListRelationFilter
  }, "typeuser_id">

  export type typesusersOrderByWithAggregationInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
    _count?: typesusersCountOrderByAggregateInput
    _avg?: typesusersAvgOrderByAggregateInput
    _max?: typesusersMaxOrderByAggregateInput
    _min?: typesusersMinOrderByAggregateInput
    _sum?: typesusersSumOrderByAggregateInput
  }

  export type typesusersScalarWhereWithAggregatesInput = {
    AND?: typesusersScalarWhereWithAggregatesInput | typesusersScalarWhereWithAggregatesInput[]
    OR?: typesusersScalarWhereWithAggregatesInput[]
    NOT?: typesusersScalarWhereWithAggregatesInput | typesusersScalarWhereWithAggregatesInput[]
    typeuser_id?: IntWithAggregatesFilter<"typesusers"> | number
    typeuser?: StringWithAggregatesFilter<"typesusers"> | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    user_id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    typeuser_id?: IntFilter<"users"> | number
    activo?: IntFilter<"users"> | number
    cajas_bancos?: Cajas_bancosListRelationFilter
    clientes?: ClientesListRelationFilter
    egresos_futuros?: Egresos_futurosListRelationFilter
    ingresos_futuros?: Ingresos_futurosListRelationFilter
    typesusers?: XOR<TypesusersRelationFilter, typesusersWhereInput>
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    activo?: SortOrder
    cajas_bancos?: cajas_bancosOrderByRelationAggregateInput
    clientes?: clientesOrderByRelationAggregateInput
    egresos_futuros?: egresos_futurosOrderByRelationAggregateInput
    ingresos_futuros?: ingresos_futurosOrderByRelationAggregateInput
    typesusers?: typesusersOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    typeuser_id?: IntFilter<"users"> | number
    activo?: IntFilter<"users"> | number
    cajas_bancos?: Cajas_bancosListRelationFilter
    clientes?: ClientesListRelationFilter
    egresos_futuros?: Egresos_futurosListRelationFilter
    ingresos_futuros?: Ingresos_futurosListRelationFilter
    typesusers?: XOR<TypesusersRelationFilter, typesusersWhereInput>
  }, "user_id">

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    activo?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"users"> | number
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    typeuser_id?: IntWithAggregatesFilter<"users"> | number
    activo?: IntWithAggregatesFilter<"users"> | number
  }

  export type cajas_bancosCreateInput = {
    nombre_cuenta: string
    cantidad_actual: number
    activo: number
    tipos_pagos: tipos_pagosCreateNestedOneWithoutCajas_bancosInput
    users: usersCreateNestedOneWithoutCajas_bancosInput
  }

  export type cajas_bancosUncheckedCreateInput = {
    cajas_bancos_id?: number
    nombre_cuenta: string
    tipo_pago_id: number
    cantidad_actual: number
    user_id: number
    activo: number
  }

  export type cajas_bancosUpdateInput = {
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutCajas_bancosNestedInput
    users?: usersUpdateOneRequiredWithoutCajas_bancosNestedInput
  }

  export type cajas_bancosUncheckedUpdateInput = {
    cajas_bancos_id?: IntFieldUpdateOperationsInput | number
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type cajas_bancosCreateManyInput = {
    cajas_bancos_id?: number
    nombre_cuenta: string
    tipo_pago_id: number
    cantidad_actual: number
    user_id: number
    activo: number
  }

  export type cajas_bancosUpdateManyMutationInput = {
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type cajas_bancosUncheckedUpdateManyInput = {
    cajas_bancos_id?: IntFieldUpdateOperationsInput | number
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type categoriasCreateInput = {
    categoria: string
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutCategoriasInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutCategoriasInput
  }

  export type categoriasUncheckedCreateInput = {
    categoria_id?: number
    categoria: string
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutCategoriasInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutCategoriasInput
  }

  export type categoriasUpdateInput = {
    categoria?: StringFieldUpdateOperationsInput | string
    egresos_futuros?: egresos_futurosUpdateManyWithoutCategoriasNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutCategoriasNestedInput
  }

  export type categoriasUncheckedUpdateInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutCategoriasNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutCategoriasNestedInput
  }

  export type categoriasCreateManyInput = {
    categoria_id?: number
    categoria: string
  }

  export type categoriasUpdateManyMutationInput = {
    categoria?: StringFieldUpdateOperationsInput | string
  }

  export type categoriasUncheckedUpdateManyInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
  }

  export type clientesCreateInput = {
    nombre: string
    apellido: string
    puesto: string
    celular?: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date | string
    activo: number
    users: usersCreateNestedOneWithoutClientesInput
  }

  export type clientesUncheckedCreateInput = {
    cliente_id?: number
    nombre: string
    apellido: string
    puesto: string
    celular?: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date | string
    user_id: number
    activo: number
  }

  export type clientesUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    puesto?: StringFieldUpdateOperationsInput | string
    celular?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: StringFieldUpdateOperationsInput | string
    dedica_empresa?: StringFieldUpdateOperationsInput | string
    num_empleados?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutClientesNestedInput
  }

  export type clientesUncheckedUpdateInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    puesto?: StringFieldUpdateOperationsInput | string
    celular?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: StringFieldUpdateOperationsInput | string
    dedica_empresa?: StringFieldUpdateOperationsInput | string
    num_empleados?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type clientesCreateManyInput = {
    cliente_id?: number
    nombre: string
    apellido: string
    puesto: string
    celular?: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date | string
    user_id: number
    activo: number
  }

  export type clientesUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    puesto?: StringFieldUpdateOperationsInput | string
    celular?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: StringFieldUpdateOperationsInput | string
    dedica_empresa?: StringFieldUpdateOperationsInput | string
    num_empleados?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type clientesUncheckedUpdateManyInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    puesto?: StringFieldUpdateOperationsInput | string
    celular?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: StringFieldUpdateOperationsInput | string
    dedica_empresa?: StringFieldUpdateOperationsInput | string
    num_empleados?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type egresos_futurosCreateInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_pago: Date | string
    activo: boolean
    categorias: categoriasCreateNestedOneWithoutEgresos_futurosInput
    tipos_pagos: tipos_pagosCreateNestedOneWithoutEgresos_futurosInput
    users: usersCreateNestedOneWithoutEgresos_futurosInput
  }

  export type egresos_futurosUncheckedCreateInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    user_id: number
    activo: boolean
  }

  export type egresos_futurosUpdateInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateOneRequiredWithoutEgresos_futurosNestedInput
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutEgresos_futurosNestedInput
    users?: usersUpdateOneRequiredWithoutEgresos_futurosNestedInput
  }

  export type egresos_futurosUncheckedUpdateInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type egresos_futurosCreateManyInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    user_id: number
    activo: boolean
  }

  export type egresos_futurosUpdateManyMutationInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type egresos_futurosUncheckedUpdateManyInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosCreateInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_cobro: Date | string
    activo: boolean
    categorias: categoriasCreateNestedOneWithoutIngresos_futurosInput
    tipos_pagos: tipos_pagosCreateNestedOneWithoutIngresos_futurosInput
    users: usersCreateNestedOneWithoutIngresos_futurosInput
  }

  export type ingresos_futurosUncheckedCreateInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    user_id: number
    activo: boolean
  }

  export type ingresos_futurosUpdateInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateOneRequiredWithoutIngresos_futurosNestedInput
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutIngresos_futurosNestedInput
    users?: usersUpdateOneRequiredWithoutIngresos_futurosNestedInput
  }

  export type ingresos_futurosUncheckedUpdateInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosCreateManyInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    user_id: number
    activo: boolean
  }

  export type ingresos_futurosUpdateManyMutationInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosUncheckedUpdateManyInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type tipos_pagosCreateInput = {
    tipo_pago: string
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutTipos_pagosInput
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutTipos_pagosInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosUncheckedCreateInput = {
    tipo_pago_id?: number
    tipo_pago: string
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutTipos_pagosInput
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosUpdateInput = {
    tipo_pago?: StringFieldUpdateOperationsInput | string
    cajas_bancos?: cajas_bancosUpdateManyWithoutTipos_pagosNestedInput
    egresos_futuros?: egresos_futurosUpdateManyWithoutTipos_pagosNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutTipos_pagosNestedInput
  }

  export type tipos_pagosUncheckedUpdateInput = {
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    tipo_pago?: StringFieldUpdateOperationsInput | string
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutTipos_pagosNestedInput
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput
  }

  export type tipos_pagosCreateManyInput = {
    tipo_pago_id?: number
    tipo_pago: string
  }

  export type tipos_pagosUpdateManyMutationInput = {
    tipo_pago?: StringFieldUpdateOperationsInput | string
  }

  export type tipos_pagosUncheckedUpdateManyInput = {
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    tipo_pago?: StringFieldUpdateOperationsInput | string
  }

  export type typesusersCreateInput = {
    typeuser: string
    users?: usersCreateNestedManyWithoutTypesusersInput
  }

  export type typesusersUncheckedCreateInput = {
    typeuser_id?: number
    typeuser: string
    users?: usersUncheckedCreateNestedManyWithoutTypesusersInput
  }

  export type typesusersUpdateInput = {
    typeuser?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateManyWithoutTypesusersNestedInput
  }

  export type typesusersUncheckedUpdateInput = {
    typeuser_id?: IntFieldUpdateOperationsInput | number
    typeuser?: StringFieldUpdateOperationsInput | string
    users?: usersUncheckedUpdateManyWithoutTypesusersNestedInput
  }

  export type typesusersCreateManyInput = {
    typeuser_id?: number
    typeuser: string
  }

  export type typesusersUpdateManyMutationInput = {
    typeuser?: StringFieldUpdateOperationsInput | string
  }

  export type typesusersUncheckedUpdateManyInput = {
    typeuser_id?: IntFieldUpdateOperationsInput | number
    typeuser?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateInput = {
    email: string
    password: string
    activo: number
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutUsersInput
    clientes?: clientesCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutUsersInput
    typesusers: typesusersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    email: string
    password: string
    typeuser_id: number
    activo: number
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutUsersInput
    clientes?: clientesUncheckedCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUpdateManyWithoutUsersNestedInput
    clientes?: clientesUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutUsersNestedInput
    typesusers?: typesusersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    typeuser_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutUsersNestedInput
    clientes?: clientesUncheckedUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    user_id?: number
    email: string
    password: string
    typeuser_id: number
    activo: number
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    typeuser_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Tipos_pagosRelationFilter = {
    is?: tipos_pagosWhereInput
    isNot?: tipos_pagosWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type cajas_bancosCountOrderByAggregateInput = {
    cajas_bancos_id?: SortOrder
    nombre_cuenta?: SortOrder
    tipo_pago_id?: SortOrder
    cantidad_actual?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type cajas_bancosAvgOrderByAggregateInput = {
    cajas_bancos_id?: SortOrder
    tipo_pago_id?: SortOrder
    cantidad_actual?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type cajas_bancosMaxOrderByAggregateInput = {
    cajas_bancos_id?: SortOrder
    nombre_cuenta?: SortOrder
    tipo_pago_id?: SortOrder
    cantidad_actual?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type cajas_bancosMinOrderByAggregateInput = {
    cajas_bancos_id?: SortOrder
    nombre_cuenta?: SortOrder
    tipo_pago_id?: SortOrder
    cantidad_actual?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type cajas_bancosSumOrderByAggregateInput = {
    cajas_bancos_id?: SortOrder
    tipo_pago_id?: SortOrder
    cantidad_actual?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Egresos_futurosListRelationFilter = {
    every?: egresos_futurosWhereInput
    some?: egresos_futurosWhereInput
    none?: egresos_futurosWhereInput
  }

  export type Ingresos_futurosListRelationFilter = {
    every?: ingresos_futurosWhereInput
    some?: ingresos_futurosWhereInput
    none?: ingresos_futurosWhereInput
  }

  export type egresos_futurosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ingresos_futurosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriasCountOrderByAggregateInput = {
    categoria_id?: SortOrder
    categoria?: SortOrder
  }

  export type categoriasAvgOrderByAggregateInput = {
    categoria_id?: SortOrder
  }

  export type categoriasMaxOrderByAggregateInput = {
    categoria_id?: SortOrder
    categoria?: SortOrder
  }

  export type categoriasMinOrderByAggregateInput = {
    categoria_id?: SortOrder
    categoria?: SortOrder
  }

  export type categoriasSumOrderByAggregateInput = {
    categoria_id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type clientesCountOrderByAggregateInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    puesto?: SortOrder
    celular?: SortOrder
    empresa?: SortOrder
    dedica_empresa?: SortOrder
    num_empleados?: SortOrder
    fecha?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type clientesAvgOrderByAggregateInput = {
    cliente_id?: SortOrder
    num_empleados?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type clientesMaxOrderByAggregateInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    puesto?: SortOrder
    celular?: SortOrder
    empresa?: SortOrder
    dedica_empresa?: SortOrder
    num_empleados?: SortOrder
    fecha?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type clientesMinOrderByAggregateInput = {
    cliente_id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    puesto?: SortOrder
    celular?: SortOrder
    empresa?: SortOrder
    dedica_empresa?: SortOrder
    num_empleados?: SortOrder
    fecha?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type clientesSumOrderByAggregateInput = {
    cliente_id?: SortOrder
    num_empleados?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CategoriasRelationFilter = {
    is?: categoriasWhereInput
    isNot?: categoriasWhereInput
  }

  export type egresos_futurosCountOrderByAggregateInput = {
    egresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_pago?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type egresos_futurosAvgOrderByAggregateInput = {
    egresos_futuros_id?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    user_id?: SortOrder
  }

  export type egresos_futurosMaxOrderByAggregateInput = {
    egresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_pago?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type egresos_futurosMinOrderByAggregateInput = {
    egresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_pago?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type egresos_futurosSumOrderByAggregateInput = {
    egresos_futuros_id?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    user_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ingresos_futurosCountOrderByAggregateInput = {
    ingresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_cobro?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type ingresos_futurosAvgOrderByAggregateInput = {
    ingresos_futuros_id?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    user_id?: SortOrder
  }

  export type ingresos_futurosMaxOrderByAggregateInput = {
    ingresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_cobro?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type ingresos_futurosMinOrderByAggregateInput = {
    ingresos_futuros_id?: SortOrder
    nombre_persona_empresa?: SortOrder
    concepto?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    fecha_tentativa_cobro?: SortOrder
    user_id?: SortOrder
    activo?: SortOrder
  }

  export type ingresos_futurosSumOrderByAggregateInput = {
    ingresos_futuros_id?: SortOrder
    tipo_pago_id?: SortOrder
    categoria_id?: SortOrder
    monto?: SortOrder
    user_id?: SortOrder
  }

  export type Cajas_bancosListRelationFilter = {
    every?: cajas_bancosWhereInput
    some?: cajas_bancosWhereInput
    none?: cajas_bancosWhereInput
  }

  export type cajas_bancosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tipos_pagosCountOrderByAggregateInput = {
    tipo_pago_id?: SortOrder
    tipo_pago?: SortOrder
  }

  export type tipos_pagosAvgOrderByAggregateInput = {
    tipo_pago_id?: SortOrder
  }

  export type tipos_pagosMaxOrderByAggregateInput = {
    tipo_pago_id?: SortOrder
    tipo_pago?: SortOrder
  }

  export type tipos_pagosMinOrderByAggregateInput = {
    tipo_pago_id?: SortOrder
    tipo_pago?: SortOrder
  }

  export type tipos_pagosSumOrderByAggregateInput = {
    tipo_pago_id?: SortOrder
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type typesusersCountOrderByAggregateInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
  }

  export type typesusersAvgOrderByAggregateInput = {
    typeuser_id?: SortOrder
  }

  export type typesusersMaxOrderByAggregateInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
  }

  export type typesusersMinOrderByAggregateInput = {
    typeuser_id?: SortOrder
    typeuser?: SortOrder
  }

  export type typesusersSumOrderByAggregateInput = {
    typeuser_id?: SortOrder
  }

  export type ClientesListRelationFilter = {
    every?: clientesWhereInput
    some?: clientesWhereInput
    none?: clientesWhereInput
  }

  export type TypesusersRelationFilter = {
    is?: typesusersWhereInput
    isNot?: typesusersWhereInput
  }

  export type clientesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    activo?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
    typeuser_id?: SortOrder
    activo?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    activo?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    typeuser_id?: SortOrder
    activo?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
    typeuser_id?: SortOrder
    activo?: SortOrder
  }

  export type tipos_pagosCreateNestedOneWithoutCajas_bancosInput = {
    create?: XOR<tipos_pagosCreateWithoutCajas_bancosInput, tipos_pagosUncheckedCreateWithoutCajas_bancosInput>
    connectOrCreate?: tipos_pagosCreateOrConnectWithoutCajas_bancosInput
    connect?: tipos_pagosWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutCajas_bancosInput = {
    create?: XOR<usersCreateWithoutCajas_bancosInput, usersUncheckedCreateWithoutCajas_bancosInput>
    connectOrCreate?: usersCreateOrConnectWithoutCajas_bancosInput
    connect?: usersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tipos_pagosUpdateOneRequiredWithoutCajas_bancosNestedInput = {
    create?: XOR<tipos_pagosCreateWithoutCajas_bancosInput, tipos_pagosUncheckedCreateWithoutCajas_bancosInput>
    connectOrCreate?: tipos_pagosCreateOrConnectWithoutCajas_bancosInput
    upsert?: tipos_pagosUpsertWithoutCajas_bancosInput
    connect?: tipos_pagosWhereUniqueInput
    update?: XOR<XOR<tipos_pagosUpdateToOneWithWhereWithoutCajas_bancosInput, tipos_pagosUpdateWithoutCajas_bancosInput>, tipos_pagosUncheckedUpdateWithoutCajas_bancosInput>
  }

  export type usersUpdateOneRequiredWithoutCajas_bancosNestedInput = {
    create?: XOR<usersCreateWithoutCajas_bancosInput, usersUncheckedCreateWithoutCajas_bancosInput>
    connectOrCreate?: usersCreateOrConnectWithoutCajas_bancosInput
    upsert?: usersUpsertWithoutCajas_bancosInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCajas_bancosInput, usersUpdateWithoutCajas_bancosInput>, usersUncheckedUpdateWithoutCajas_bancosInput>
  }

  export type egresos_futurosCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<egresos_futurosCreateWithoutCategoriasInput, egresos_futurosUncheckedCreateWithoutCategoriasInput> | egresos_futurosCreateWithoutCategoriasInput[] | egresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutCategoriasInput | egresos_futurosCreateOrConnectWithoutCategoriasInput[]
    createMany?: egresos_futurosCreateManyCategoriasInputEnvelope
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
  }

  export type ingresos_futurosCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<ingresos_futurosCreateWithoutCategoriasInput, ingresos_futurosUncheckedCreateWithoutCategoriasInput> | ingresos_futurosCreateWithoutCategoriasInput[] | ingresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutCategoriasInput | ingresos_futurosCreateOrConnectWithoutCategoriasInput[]
    createMany?: ingresos_futurosCreateManyCategoriasInputEnvelope
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
  }

  export type egresos_futurosUncheckedCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<egresos_futurosCreateWithoutCategoriasInput, egresos_futurosUncheckedCreateWithoutCategoriasInput> | egresos_futurosCreateWithoutCategoriasInput[] | egresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutCategoriasInput | egresos_futurosCreateOrConnectWithoutCategoriasInput[]
    createMany?: egresos_futurosCreateManyCategoriasInputEnvelope
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
  }

  export type ingresos_futurosUncheckedCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<ingresos_futurosCreateWithoutCategoriasInput, ingresos_futurosUncheckedCreateWithoutCategoriasInput> | ingresos_futurosCreateWithoutCategoriasInput[] | ingresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutCategoriasInput | ingresos_futurosCreateOrConnectWithoutCategoriasInput[]
    createMany?: ingresos_futurosCreateManyCategoriasInputEnvelope
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
  }

  export type egresos_futurosUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<egresos_futurosCreateWithoutCategoriasInput, egresos_futurosUncheckedCreateWithoutCategoriasInput> | egresos_futurosCreateWithoutCategoriasInput[] | egresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutCategoriasInput | egresos_futurosCreateOrConnectWithoutCategoriasInput[]
    upsert?: egresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput | egresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: egresos_futurosCreateManyCategoriasInputEnvelope
    set?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    disconnect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    delete?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    update?: egresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput | egresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: egresos_futurosUpdateManyWithWhereWithoutCategoriasInput | egresos_futurosUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
  }

  export type ingresos_futurosUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<ingresos_futurosCreateWithoutCategoriasInput, ingresos_futurosUncheckedCreateWithoutCategoriasInput> | ingresos_futurosCreateWithoutCategoriasInput[] | ingresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutCategoriasInput | ingresos_futurosCreateOrConnectWithoutCategoriasInput[]
    upsert?: ingresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput | ingresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: ingresos_futurosCreateManyCategoriasInputEnvelope
    set?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    disconnect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    delete?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    update?: ingresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput | ingresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: ingresos_futurosUpdateManyWithWhereWithoutCategoriasInput | ingresos_futurosUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
  }

  export type egresos_futurosUncheckedUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<egresos_futurosCreateWithoutCategoriasInput, egresos_futurosUncheckedCreateWithoutCategoriasInput> | egresos_futurosCreateWithoutCategoriasInput[] | egresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutCategoriasInput | egresos_futurosCreateOrConnectWithoutCategoriasInput[]
    upsert?: egresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput | egresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: egresos_futurosCreateManyCategoriasInputEnvelope
    set?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    disconnect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    delete?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    update?: egresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput | egresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: egresos_futurosUpdateManyWithWhereWithoutCategoriasInput | egresos_futurosUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
  }

  export type ingresos_futurosUncheckedUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<ingresos_futurosCreateWithoutCategoriasInput, ingresos_futurosUncheckedCreateWithoutCategoriasInput> | ingresos_futurosCreateWithoutCategoriasInput[] | ingresos_futurosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutCategoriasInput | ingresos_futurosCreateOrConnectWithoutCategoriasInput[]
    upsert?: ingresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput | ingresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: ingresos_futurosCreateManyCategoriasInputEnvelope
    set?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    disconnect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    delete?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    update?: ingresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput | ingresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: ingresos_futurosUpdateManyWithWhereWithoutCategoriasInput | ingresos_futurosUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutClientesInput = {
    create?: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
    connectOrCreate?: usersCreateOrConnectWithoutClientesInput
    connect?: usersWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
    connectOrCreate?: usersCreateOrConnectWithoutClientesInput
    upsert?: usersUpsertWithoutClientesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutClientesInput, usersUpdateWithoutClientesInput>, usersUncheckedUpdateWithoutClientesInput>
  }

  export type categoriasCreateNestedOneWithoutEgresos_futurosInput = {
    create?: XOR<categoriasCreateWithoutEgresos_futurosInput, categoriasUncheckedCreateWithoutEgresos_futurosInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutEgresos_futurosInput
    connect?: categoriasWhereUniqueInput
  }

  export type tipos_pagosCreateNestedOneWithoutEgresos_futurosInput = {
    create?: XOR<tipos_pagosCreateWithoutEgresos_futurosInput, tipos_pagosUncheckedCreateWithoutEgresos_futurosInput>
    connectOrCreate?: tipos_pagosCreateOrConnectWithoutEgresos_futurosInput
    connect?: tipos_pagosWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutEgresos_futurosInput = {
    create?: XOR<usersCreateWithoutEgresos_futurosInput, usersUncheckedCreateWithoutEgresos_futurosInput>
    connectOrCreate?: usersCreateOrConnectWithoutEgresos_futurosInput
    connect?: usersWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type categoriasUpdateOneRequiredWithoutEgresos_futurosNestedInput = {
    create?: XOR<categoriasCreateWithoutEgresos_futurosInput, categoriasUncheckedCreateWithoutEgresos_futurosInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutEgresos_futurosInput
    upsert?: categoriasUpsertWithoutEgresos_futurosInput
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutEgresos_futurosInput, categoriasUpdateWithoutEgresos_futurosInput>, categoriasUncheckedUpdateWithoutEgresos_futurosInput>
  }

  export type tipos_pagosUpdateOneRequiredWithoutEgresos_futurosNestedInput = {
    create?: XOR<tipos_pagosCreateWithoutEgresos_futurosInput, tipos_pagosUncheckedCreateWithoutEgresos_futurosInput>
    connectOrCreate?: tipos_pagosCreateOrConnectWithoutEgresos_futurosInput
    upsert?: tipos_pagosUpsertWithoutEgresos_futurosInput
    connect?: tipos_pagosWhereUniqueInput
    update?: XOR<XOR<tipos_pagosUpdateToOneWithWhereWithoutEgresos_futurosInput, tipos_pagosUpdateWithoutEgresos_futurosInput>, tipos_pagosUncheckedUpdateWithoutEgresos_futurosInput>
  }

  export type usersUpdateOneRequiredWithoutEgresos_futurosNestedInput = {
    create?: XOR<usersCreateWithoutEgresos_futurosInput, usersUncheckedCreateWithoutEgresos_futurosInput>
    connectOrCreate?: usersCreateOrConnectWithoutEgresos_futurosInput
    upsert?: usersUpsertWithoutEgresos_futurosInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutEgresos_futurosInput, usersUpdateWithoutEgresos_futurosInput>, usersUncheckedUpdateWithoutEgresos_futurosInput>
  }

  export type categoriasCreateNestedOneWithoutIngresos_futurosInput = {
    create?: XOR<categoriasCreateWithoutIngresos_futurosInput, categoriasUncheckedCreateWithoutIngresos_futurosInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutIngresos_futurosInput
    connect?: categoriasWhereUniqueInput
  }

  export type tipos_pagosCreateNestedOneWithoutIngresos_futurosInput = {
    create?: XOR<tipos_pagosCreateWithoutIngresos_futurosInput, tipos_pagosUncheckedCreateWithoutIngresos_futurosInput>
    connectOrCreate?: tipos_pagosCreateOrConnectWithoutIngresos_futurosInput
    connect?: tipos_pagosWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutIngresos_futurosInput = {
    create?: XOR<usersCreateWithoutIngresos_futurosInput, usersUncheckedCreateWithoutIngresos_futurosInput>
    connectOrCreate?: usersCreateOrConnectWithoutIngresos_futurosInput
    connect?: usersWhereUniqueInput
  }

  export type categoriasUpdateOneRequiredWithoutIngresos_futurosNestedInput = {
    create?: XOR<categoriasCreateWithoutIngresos_futurosInput, categoriasUncheckedCreateWithoutIngresos_futurosInput>
    connectOrCreate?: categoriasCreateOrConnectWithoutIngresos_futurosInput
    upsert?: categoriasUpsertWithoutIngresos_futurosInput
    connect?: categoriasWhereUniqueInput
    update?: XOR<XOR<categoriasUpdateToOneWithWhereWithoutIngresos_futurosInput, categoriasUpdateWithoutIngresos_futurosInput>, categoriasUncheckedUpdateWithoutIngresos_futurosInput>
  }

  export type tipos_pagosUpdateOneRequiredWithoutIngresos_futurosNestedInput = {
    create?: XOR<tipos_pagosCreateWithoutIngresos_futurosInput, tipos_pagosUncheckedCreateWithoutIngresos_futurosInput>
    connectOrCreate?: tipos_pagosCreateOrConnectWithoutIngresos_futurosInput
    upsert?: tipos_pagosUpsertWithoutIngresos_futurosInput
    connect?: tipos_pagosWhereUniqueInput
    update?: XOR<XOR<tipos_pagosUpdateToOneWithWhereWithoutIngresos_futurosInput, tipos_pagosUpdateWithoutIngresos_futurosInput>, tipos_pagosUncheckedUpdateWithoutIngresos_futurosInput>
  }

  export type usersUpdateOneRequiredWithoutIngresos_futurosNestedInput = {
    create?: XOR<usersCreateWithoutIngresos_futurosInput, usersUncheckedCreateWithoutIngresos_futurosInput>
    connectOrCreate?: usersCreateOrConnectWithoutIngresos_futurosInput
    upsert?: usersUpsertWithoutIngresos_futurosInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutIngresos_futurosInput, usersUpdateWithoutIngresos_futurosInput>, usersUncheckedUpdateWithoutIngresos_futurosInput>
  }

  export type cajas_bancosCreateNestedManyWithoutTipos_pagosInput = {
    create?: XOR<cajas_bancosCreateWithoutTipos_pagosInput, cajas_bancosUncheckedCreateWithoutTipos_pagosInput> | cajas_bancosCreateWithoutTipos_pagosInput[] | cajas_bancosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutTipos_pagosInput | cajas_bancosCreateOrConnectWithoutTipos_pagosInput[]
    createMany?: cajas_bancosCreateManyTipos_pagosInputEnvelope
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
  }

  export type egresos_futurosCreateNestedManyWithoutTipos_pagosInput = {
    create?: XOR<egresos_futurosCreateWithoutTipos_pagosInput, egresos_futurosUncheckedCreateWithoutTipos_pagosInput> | egresos_futurosCreateWithoutTipos_pagosInput[] | egresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutTipos_pagosInput | egresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    createMany?: egresos_futurosCreateManyTipos_pagosInputEnvelope
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
  }

  export type ingresos_futurosCreateNestedManyWithoutTipos_pagosInput = {
    create?: XOR<ingresos_futurosCreateWithoutTipos_pagosInput, ingresos_futurosUncheckedCreateWithoutTipos_pagosInput> | ingresos_futurosCreateWithoutTipos_pagosInput[] | ingresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutTipos_pagosInput | ingresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    createMany?: ingresos_futurosCreateManyTipos_pagosInputEnvelope
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
  }

  export type cajas_bancosUncheckedCreateNestedManyWithoutTipos_pagosInput = {
    create?: XOR<cajas_bancosCreateWithoutTipos_pagosInput, cajas_bancosUncheckedCreateWithoutTipos_pagosInput> | cajas_bancosCreateWithoutTipos_pagosInput[] | cajas_bancosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutTipos_pagosInput | cajas_bancosCreateOrConnectWithoutTipos_pagosInput[]
    createMany?: cajas_bancosCreateManyTipos_pagosInputEnvelope
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
  }

  export type egresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput = {
    create?: XOR<egresos_futurosCreateWithoutTipos_pagosInput, egresos_futurosUncheckedCreateWithoutTipos_pagosInput> | egresos_futurosCreateWithoutTipos_pagosInput[] | egresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutTipos_pagosInput | egresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    createMany?: egresos_futurosCreateManyTipos_pagosInputEnvelope
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
  }

  export type ingresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput = {
    create?: XOR<ingresos_futurosCreateWithoutTipos_pagosInput, ingresos_futurosUncheckedCreateWithoutTipos_pagosInput> | ingresos_futurosCreateWithoutTipos_pagosInput[] | ingresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutTipos_pagosInput | ingresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    createMany?: ingresos_futurosCreateManyTipos_pagosInputEnvelope
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
  }

  export type cajas_bancosUpdateManyWithoutTipos_pagosNestedInput = {
    create?: XOR<cajas_bancosCreateWithoutTipos_pagosInput, cajas_bancosUncheckedCreateWithoutTipos_pagosInput> | cajas_bancosCreateWithoutTipos_pagosInput[] | cajas_bancosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutTipos_pagosInput | cajas_bancosCreateOrConnectWithoutTipos_pagosInput[]
    upsert?: cajas_bancosUpsertWithWhereUniqueWithoutTipos_pagosInput | cajas_bancosUpsertWithWhereUniqueWithoutTipos_pagosInput[]
    createMany?: cajas_bancosCreateManyTipos_pagosInputEnvelope
    set?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    disconnect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    delete?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    update?: cajas_bancosUpdateWithWhereUniqueWithoutTipos_pagosInput | cajas_bancosUpdateWithWhereUniqueWithoutTipos_pagosInput[]
    updateMany?: cajas_bancosUpdateManyWithWhereWithoutTipos_pagosInput | cajas_bancosUpdateManyWithWhereWithoutTipos_pagosInput[]
    deleteMany?: cajas_bancosScalarWhereInput | cajas_bancosScalarWhereInput[]
  }

  export type egresos_futurosUpdateManyWithoutTipos_pagosNestedInput = {
    create?: XOR<egresos_futurosCreateWithoutTipos_pagosInput, egresos_futurosUncheckedCreateWithoutTipos_pagosInput> | egresos_futurosCreateWithoutTipos_pagosInput[] | egresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutTipos_pagosInput | egresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    upsert?: egresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput | egresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput[]
    createMany?: egresos_futurosCreateManyTipos_pagosInputEnvelope
    set?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    disconnect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    delete?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    update?: egresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput | egresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput[]
    updateMany?: egresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput | egresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput[]
    deleteMany?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
  }

  export type ingresos_futurosUpdateManyWithoutTipos_pagosNestedInput = {
    create?: XOR<ingresos_futurosCreateWithoutTipos_pagosInput, ingresos_futurosUncheckedCreateWithoutTipos_pagosInput> | ingresos_futurosCreateWithoutTipos_pagosInput[] | ingresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutTipos_pagosInput | ingresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    upsert?: ingresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput | ingresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput[]
    createMany?: ingresos_futurosCreateManyTipos_pagosInputEnvelope
    set?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    disconnect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    delete?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    update?: ingresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput | ingresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput[]
    updateMany?: ingresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput | ingresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput[]
    deleteMany?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
  }

  export type cajas_bancosUncheckedUpdateManyWithoutTipos_pagosNestedInput = {
    create?: XOR<cajas_bancosCreateWithoutTipos_pagosInput, cajas_bancosUncheckedCreateWithoutTipos_pagosInput> | cajas_bancosCreateWithoutTipos_pagosInput[] | cajas_bancosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutTipos_pagosInput | cajas_bancosCreateOrConnectWithoutTipos_pagosInput[]
    upsert?: cajas_bancosUpsertWithWhereUniqueWithoutTipos_pagosInput | cajas_bancosUpsertWithWhereUniqueWithoutTipos_pagosInput[]
    createMany?: cajas_bancosCreateManyTipos_pagosInputEnvelope
    set?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    disconnect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    delete?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    update?: cajas_bancosUpdateWithWhereUniqueWithoutTipos_pagosInput | cajas_bancosUpdateWithWhereUniqueWithoutTipos_pagosInput[]
    updateMany?: cajas_bancosUpdateManyWithWhereWithoutTipos_pagosInput | cajas_bancosUpdateManyWithWhereWithoutTipos_pagosInput[]
    deleteMany?: cajas_bancosScalarWhereInput | cajas_bancosScalarWhereInput[]
  }

  export type egresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput = {
    create?: XOR<egresos_futurosCreateWithoutTipos_pagosInput, egresos_futurosUncheckedCreateWithoutTipos_pagosInput> | egresos_futurosCreateWithoutTipos_pagosInput[] | egresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutTipos_pagosInput | egresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    upsert?: egresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput | egresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput[]
    createMany?: egresos_futurosCreateManyTipos_pagosInputEnvelope
    set?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    disconnect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    delete?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    update?: egresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput | egresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput[]
    updateMany?: egresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput | egresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput[]
    deleteMany?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
  }

  export type ingresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput = {
    create?: XOR<ingresos_futurosCreateWithoutTipos_pagosInput, ingresos_futurosUncheckedCreateWithoutTipos_pagosInput> | ingresos_futurosCreateWithoutTipos_pagosInput[] | ingresos_futurosUncheckedCreateWithoutTipos_pagosInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutTipos_pagosInput | ingresos_futurosCreateOrConnectWithoutTipos_pagosInput[]
    upsert?: ingresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput | ingresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput[]
    createMany?: ingresos_futurosCreateManyTipos_pagosInputEnvelope
    set?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    disconnect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    delete?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    update?: ingresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput | ingresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput[]
    updateMany?: ingresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput | ingresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput[]
    deleteMany?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
  }

  export type usersCreateNestedManyWithoutTypesusersInput = {
    create?: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput> | usersCreateWithoutTypesusersInput[] | usersUncheckedCreateWithoutTypesusersInput[]
    connectOrCreate?: usersCreateOrConnectWithoutTypesusersInput | usersCreateOrConnectWithoutTypesusersInput[]
    createMany?: usersCreateManyTypesusersInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutTypesusersInput = {
    create?: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput> | usersCreateWithoutTypesusersInput[] | usersUncheckedCreateWithoutTypesusersInput[]
    connectOrCreate?: usersCreateOrConnectWithoutTypesusersInput | usersCreateOrConnectWithoutTypesusersInput[]
    createMany?: usersCreateManyTypesusersInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type usersUpdateManyWithoutTypesusersNestedInput = {
    create?: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput> | usersCreateWithoutTypesusersInput[] | usersUncheckedCreateWithoutTypesusersInput[]
    connectOrCreate?: usersCreateOrConnectWithoutTypesusersInput | usersCreateOrConnectWithoutTypesusersInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutTypesusersInput | usersUpsertWithWhereUniqueWithoutTypesusersInput[]
    createMany?: usersCreateManyTypesusersInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutTypesusersInput | usersUpdateWithWhereUniqueWithoutTypesusersInput[]
    updateMany?: usersUpdateManyWithWhereWithoutTypesusersInput | usersUpdateManyWithWhereWithoutTypesusersInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutTypesusersNestedInput = {
    create?: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput> | usersCreateWithoutTypesusersInput[] | usersUncheckedCreateWithoutTypesusersInput[]
    connectOrCreate?: usersCreateOrConnectWithoutTypesusersInput | usersCreateOrConnectWithoutTypesusersInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutTypesusersInput | usersUpsertWithWhereUniqueWithoutTypesusersInput[]
    createMany?: usersCreateManyTypesusersInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutTypesusersInput | usersUpdateWithWhereUniqueWithoutTypesusersInput[]
    updateMany?: usersUpdateManyWithWhereWithoutTypesusersInput | usersUpdateManyWithWhereWithoutTypesusersInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type cajas_bancosCreateNestedManyWithoutUsersInput = {
    create?: XOR<cajas_bancosCreateWithoutUsersInput, cajas_bancosUncheckedCreateWithoutUsersInput> | cajas_bancosCreateWithoutUsersInput[] | cajas_bancosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutUsersInput | cajas_bancosCreateOrConnectWithoutUsersInput[]
    createMany?: cajas_bancosCreateManyUsersInputEnvelope
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
  }

  export type clientesCreateNestedManyWithoutUsersInput = {
    create?: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput> | clientesCreateWithoutUsersInput[] | clientesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: clientesCreateOrConnectWithoutUsersInput | clientesCreateOrConnectWithoutUsersInput[]
    createMany?: clientesCreateManyUsersInputEnvelope
    connect?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
  }

  export type egresos_futurosCreateNestedManyWithoutUsersInput = {
    create?: XOR<egresos_futurosCreateWithoutUsersInput, egresos_futurosUncheckedCreateWithoutUsersInput> | egresos_futurosCreateWithoutUsersInput[] | egresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutUsersInput | egresos_futurosCreateOrConnectWithoutUsersInput[]
    createMany?: egresos_futurosCreateManyUsersInputEnvelope
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
  }

  export type ingresos_futurosCreateNestedManyWithoutUsersInput = {
    create?: XOR<ingresos_futurosCreateWithoutUsersInput, ingresos_futurosUncheckedCreateWithoutUsersInput> | ingresos_futurosCreateWithoutUsersInput[] | ingresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutUsersInput | ingresos_futurosCreateOrConnectWithoutUsersInput[]
    createMany?: ingresos_futurosCreateManyUsersInputEnvelope
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
  }

  export type typesusersCreateNestedOneWithoutUsersInput = {
    create?: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: typesusersCreateOrConnectWithoutUsersInput
    connect?: typesusersWhereUniqueInput
  }

  export type cajas_bancosUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<cajas_bancosCreateWithoutUsersInput, cajas_bancosUncheckedCreateWithoutUsersInput> | cajas_bancosCreateWithoutUsersInput[] | cajas_bancosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutUsersInput | cajas_bancosCreateOrConnectWithoutUsersInput[]
    createMany?: cajas_bancosCreateManyUsersInputEnvelope
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
  }

  export type clientesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput> | clientesCreateWithoutUsersInput[] | clientesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: clientesCreateOrConnectWithoutUsersInput | clientesCreateOrConnectWithoutUsersInput[]
    createMany?: clientesCreateManyUsersInputEnvelope
    connect?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
  }

  export type egresos_futurosUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<egresos_futurosCreateWithoutUsersInput, egresos_futurosUncheckedCreateWithoutUsersInput> | egresos_futurosCreateWithoutUsersInput[] | egresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutUsersInput | egresos_futurosCreateOrConnectWithoutUsersInput[]
    createMany?: egresos_futurosCreateManyUsersInputEnvelope
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
  }

  export type ingresos_futurosUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ingresos_futurosCreateWithoutUsersInput, ingresos_futurosUncheckedCreateWithoutUsersInput> | ingresos_futurosCreateWithoutUsersInput[] | ingresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutUsersInput | ingresos_futurosCreateOrConnectWithoutUsersInput[]
    createMany?: ingresos_futurosCreateManyUsersInputEnvelope
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
  }

  export type cajas_bancosUpdateManyWithoutUsersNestedInput = {
    create?: XOR<cajas_bancosCreateWithoutUsersInput, cajas_bancosUncheckedCreateWithoutUsersInput> | cajas_bancosCreateWithoutUsersInput[] | cajas_bancosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutUsersInput | cajas_bancosCreateOrConnectWithoutUsersInput[]
    upsert?: cajas_bancosUpsertWithWhereUniqueWithoutUsersInput | cajas_bancosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: cajas_bancosCreateManyUsersInputEnvelope
    set?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    disconnect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    delete?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    update?: cajas_bancosUpdateWithWhereUniqueWithoutUsersInput | cajas_bancosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: cajas_bancosUpdateManyWithWhereWithoutUsersInput | cajas_bancosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: cajas_bancosScalarWhereInput | cajas_bancosScalarWhereInput[]
  }

  export type clientesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput> | clientesCreateWithoutUsersInput[] | clientesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: clientesCreateOrConnectWithoutUsersInput | clientesCreateOrConnectWithoutUsersInput[]
    upsert?: clientesUpsertWithWhereUniqueWithoutUsersInput | clientesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: clientesCreateManyUsersInputEnvelope
    set?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    disconnect?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    delete?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    connect?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    update?: clientesUpdateWithWhereUniqueWithoutUsersInput | clientesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: clientesUpdateManyWithWhereWithoutUsersInput | clientesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: clientesScalarWhereInput | clientesScalarWhereInput[]
  }

  export type egresos_futurosUpdateManyWithoutUsersNestedInput = {
    create?: XOR<egresos_futurosCreateWithoutUsersInput, egresos_futurosUncheckedCreateWithoutUsersInput> | egresos_futurosCreateWithoutUsersInput[] | egresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutUsersInput | egresos_futurosCreateOrConnectWithoutUsersInput[]
    upsert?: egresos_futurosUpsertWithWhereUniqueWithoutUsersInput | egresos_futurosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: egresos_futurosCreateManyUsersInputEnvelope
    set?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    disconnect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    delete?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    update?: egresos_futurosUpdateWithWhereUniqueWithoutUsersInput | egresos_futurosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: egresos_futurosUpdateManyWithWhereWithoutUsersInput | egresos_futurosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
  }

  export type ingresos_futurosUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ingresos_futurosCreateWithoutUsersInput, ingresos_futurosUncheckedCreateWithoutUsersInput> | ingresos_futurosCreateWithoutUsersInput[] | ingresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutUsersInput | ingresos_futurosCreateOrConnectWithoutUsersInput[]
    upsert?: ingresos_futurosUpsertWithWhereUniqueWithoutUsersInput | ingresos_futurosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ingresos_futurosCreateManyUsersInputEnvelope
    set?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    disconnect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    delete?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    update?: ingresos_futurosUpdateWithWhereUniqueWithoutUsersInput | ingresos_futurosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ingresos_futurosUpdateManyWithWhereWithoutUsersInput | ingresos_futurosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
  }

  export type typesusersUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: typesusersCreateOrConnectWithoutUsersInput
    upsert?: typesusersUpsertWithoutUsersInput
    connect?: typesusersWhereUniqueInput
    update?: XOR<XOR<typesusersUpdateToOneWithWhereWithoutUsersInput, typesusersUpdateWithoutUsersInput>, typesusersUncheckedUpdateWithoutUsersInput>
  }

  export type cajas_bancosUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<cajas_bancosCreateWithoutUsersInput, cajas_bancosUncheckedCreateWithoutUsersInput> | cajas_bancosCreateWithoutUsersInput[] | cajas_bancosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: cajas_bancosCreateOrConnectWithoutUsersInput | cajas_bancosCreateOrConnectWithoutUsersInput[]
    upsert?: cajas_bancosUpsertWithWhereUniqueWithoutUsersInput | cajas_bancosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: cajas_bancosCreateManyUsersInputEnvelope
    set?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    disconnect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    delete?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    connect?: cajas_bancosWhereUniqueInput | cajas_bancosWhereUniqueInput[]
    update?: cajas_bancosUpdateWithWhereUniqueWithoutUsersInput | cajas_bancosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: cajas_bancosUpdateManyWithWhereWithoutUsersInput | cajas_bancosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: cajas_bancosScalarWhereInput | cajas_bancosScalarWhereInput[]
  }

  export type clientesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput> | clientesCreateWithoutUsersInput[] | clientesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: clientesCreateOrConnectWithoutUsersInput | clientesCreateOrConnectWithoutUsersInput[]
    upsert?: clientesUpsertWithWhereUniqueWithoutUsersInput | clientesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: clientesCreateManyUsersInputEnvelope
    set?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    disconnect?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    delete?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    connect?: clientesWhereUniqueInput | clientesWhereUniqueInput[]
    update?: clientesUpdateWithWhereUniqueWithoutUsersInput | clientesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: clientesUpdateManyWithWhereWithoutUsersInput | clientesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: clientesScalarWhereInput | clientesScalarWhereInput[]
  }

  export type egresos_futurosUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<egresos_futurosCreateWithoutUsersInput, egresos_futurosUncheckedCreateWithoutUsersInput> | egresos_futurosCreateWithoutUsersInput[] | egresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: egresos_futurosCreateOrConnectWithoutUsersInput | egresos_futurosCreateOrConnectWithoutUsersInput[]
    upsert?: egresos_futurosUpsertWithWhereUniqueWithoutUsersInput | egresos_futurosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: egresos_futurosCreateManyUsersInputEnvelope
    set?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    disconnect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    delete?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    connect?: egresos_futurosWhereUniqueInput | egresos_futurosWhereUniqueInput[]
    update?: egresos_futurosUpdateWithWhereUniqueWithoutUsersInput | egresos_futurosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: egresos_futurosUpdateManyWithWhereWithoutUsersInput | egresos_futurosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
  }

  export type ingresos_futurosUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ingresos_futurosCreateWithoutUsersInput, ingresos_futurosUncheckedCreateWithoutUsersInput> | ingresos_futurosCreateWithoutUsersInput[] | ingresos_futurosUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ingresos_futurosCreateOrConnectWithoutUsersInput | ingresos_futurosCreateOrConnectWithoutUsersInput[]
    upsert?: ingresos_futurosUpsertWithWhereUniqueWithoutUsersInput | ingresos_futurosUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ingresos_futurosCreateManyUsersInputEnvelope
    set?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    disconnect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    delete?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    connect?: ingresos_futurosWhereUniqueInput | ingresos_futurosWhereUniqueInput[]
    update?: ingresos_futurosUpdateWithWhereUniqueWithoutUsersInput | ingresos_futurosUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ingresos_futurosUpdateManyWithWhereWithoutUsersInput | ingresos_futurosUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type tipos_pagosCreateWithoutCajas_bancosInput = {
    tipo_pago: string
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutTipos_pagosInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosUncheckedCreateWithoutCajas_bancosInput = {
    tipo_pago_id?: number
    tipo_pago: string
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosCreateOrConnectWithoutCajas_bancosInput = {
    where: tipos_pagosWhereUniqueInput
    create: XOR<tipos_pagosCreateWithoutCajas_bancosInput, tipos_pagosUncheckedCreateWithoutCajas_bancosInput>
  }

  export type usersCreateWithoutCajas_bancosInput = {
    email: string
    password: string
    activo: number
    clientes?: clientesCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutUsersInput
    typesusers: typesusersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCajas_bancosInput = {
    user_id?: number
    email: string
    password: string
    typeuser_id: number
    activo: number
    clientes?: clientesUncheckedCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCajas_bancosInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCajas_bancosInput, usersUncheckedCreateWithoutCajas_bancosInput>
  }

  export type tipos_pagosUpsertWithoutCajas_bancosInput = {
    update: XOR<tipos_pagosUpdateWithoutCajas_bancosInput, tipos_pagosUncheckedUpdateWithoutCajas_bancosInput>
    create: XOR<tipos_pagosCreateWithoutCajas_bancosInput, tipos_pagosUncheckedCreateWithoutCajas_bancosInput>
    where?: tipos_pagosWhereInput
  }

  export type tipos_pagosUpdateToOneWithWhereWithoutCajas_bancosInput = {
    where?: tipos_pagosWhereInput
    data: XOR<tipos_pagosUpdateWithoutCajas_bancosInput, tipos_pagosUncheckedUpdateWithoutCajas_bancosInput>
  }

  export type tipos_pagosUpdateWithoutCajas_bancosInput = {
    tipo_pago?: StringFieldUpdateOperationsInput | string
    egresos_futuros?: egresos_futurosUpdateManyWithoutTipos_pagosNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutTipos_pagosNestedInput
  }

  export type tipos_pagosUncheckedUpdateWithoutCajas_bancosInput = {
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    tipo_pago?: StringFieldUpdateOperationsInput | string
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput
  }

  export type usersUpsertWithoutCajas_bancosInput = {
    update: XOR<usersUpdateWithoutCajas_bancosInput, usersUncheckedUpdateWithoutCajas_bancosInput>
    create: XOR<usersCreateWithoutCajas_bancosInput, usersUncheckedCreateWithoutCajas_bancosInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCajas_bancosInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCajas_bancosInput, usersUncheckedUpdateWithoutCajas_bancosInput>
  }

  export type usersUpdateWithoutCajas_bancosInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    clientes?: clientesUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutUsersNestedInput
    typesusers?: typesusersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCajas_bancosInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    typeuser_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    clientes?: clientesUncheckedUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type egresos_futurosCreateWithoutCategoriasInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_pago: Date | string
    activo: boolean
    tipos_pagos: tipos_pagosCreateNestedOneWithoutEgresos_futurosInput
    users: usersCreateNestedOneWithoutEgresos_futurosInput
  }

  export type egresos_futurosUncheckedCreateWithoutCategoriasInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    user_id: number
    activo: boolean
  }

  export type egresos_futurosCreateOrConnectWithoutCategoriasInput = {
    where: egresos_futurosWhereUniqueInput
    create: XOR<egresos_futurosCreateWithoutCategoriasInput, egresos_futurosUncheckedCreateWithoutCategoriasInput>
  }

  export type egresos_futurosCreateManyCategoriasInputEnvelope = {
    data: egresos_futurosCreateManyCategoriasInput | egresos_futurosCreateManyCategoriasInput[]
    skipDuplicates?: boolean
  }

  export type ingresos_futurosCreateWithoutCategoriasInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_cobro: Date | string
    activo: boolean
    tipos_pagos: tipos_pagosCreateNestedOneWithoutIngresos_futurosInput
    users: usersCreateNestedOneWithoutIngresos_futurosInput
  }

  export type ingresos_futurosUncheckedCreateWithoutCategoriasInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    user_id: number
    activo: boolean
  }

  export type ingresos_futurosCreateOrConnectWithoutCategoriasInput = {
    where: ingresos_futurosWhereUniqueInput
    create: XOR<ingresos_futurosCreateWithoutCategoriasInput, ingresos_futurosUncheckedCreateWithoutCategoriasInput>
  }

  export type ingresos_futurosCreateManyCategoriasInputEnvelope = {
    data: ingresos_futurosCreateManyCategoriasInput | ingresos_futurosCreateManyCategoriasInput[]
    skipDuplicates?: boolean
  }

  export type egresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput = {
    where: egresos_futurosWhereUniqueInput
    update: XOR<egresos_futurosUpdateWithoutCategoriasInput, egresos_futurosUncheckedUpdateWithoutCategoriasInput>
    create: XOR<egresos_futurosCreateWithoutCategoriasInput, egresos_futurosUncheckedCreateWithoutCategoriasInput>
  }

  export type egresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput = {
    where: egresos_futurosWhereUniqueInput
    data: XOR<egresos_futurosUpdateWithoutCategoriasInput, egresos_futurosUncheckedUpdateWithoutCategoriasInput>
  }

  export type egresos_futurosUpdateManyWithWhereWithoutCategoriasInput = {
    where: egresos_futurosScalarWhereInput
    data: XOR<egresos_futurosUpdateManyMutationInput, egresos_futurosUncheckedUpdateManyWithoutCategoriasInput>
  }

  export type egresos_futurosScalarWhereInput = {
    AND?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
    OR?: egresos_futurosScalarWhereInput[]
    NOT?: egresos_futurosScalarWhereInput | egresos_futurosScalarWhereInput[]
    egresos_futuros_id?: IntFilter<"egresos_futuros"> | number
    nombre_persona_empresa?: StringFilter<"egresos_futuros"> | string
    concepto?: StringFilter<"egresos_futuros"> | string
    tipo_pago_id?: IntFilter<"egresos_futuros"> | number
    categoria_id?: IntFilter<"egresos_futuros"> | number
    monto?: IntFilter<"egresos_futuros"> | number
    fecha_tentativa_pago?: DateTimeFilter<"egresos_futuros"> | Date | string
    user_id?: IntFilter<"egresos_futuros"> | number
    activo?: BoolFilter<"egresos_futuros"> | boolean
  }

  export type ingresos_futurosUpsertWithWhereUniqueWithoutCategoriasInput = {
    where: ingresos_futurosWhereUniqueInput
    update: XOR<ingresos_futurosUpdateWithoutCategoriasInput, ingresos_futurosUncheckedUpdateWithoutCategoriasInput>
    create: XOR<ingresos_futurosCreateWithoutCategoriasInput, ingresos_futurosUncheckedCreateWithoutCategoriasInput>
  }

  export type ingresos_futurosUpdateWithWhereUniqueWithoutCategoriasInput = {
    where: ingresos_futurosWhereUniqueInput
    data: XOR<ingresos_futurosUpdateWithoutCategoriasInput, ingresos_futurosUncheckedUpdateWithoutCategoriasInput>
  }

  export type ingresos_futurosUpdateManyWithWhereWithoutCategoriasInput = {
    where: ingresos_futurosScalarWhereInput
    data: XOR<ingresos_futurosUpdateManyMutationInput, ingresos_futurosUncheckedUpdateManyWithoutCategoriasInput>
  }

  export type ingresos_futurosScalarWhereInput = {
    AND?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
    OR?: ingresos_futurosScalarWhereInput[]
    NOT?: ingresos_futurosScalarWhereInput | ingresos_futurosScalarWhereInput[]
    ingresos_futuros_id?: IntFilter<"ingresos_futuros"> | number
    nombre_persona_empresa?: StringFilter<"ingresos_futuros"> | string
    concepto?: StringFilter<"ingresos_futuros"> | string
    tipo_pago_id?: IntFilter<"ingresos_futuros"> | number
    categoria_id?: IntFilter<"ingresos_futuros"> | number
    monto?: IntFilter<"ingresos_futuros"> | number
    fecha_tentativa_cobro?: DateTimeFilter<"ingresos_futuros"> | Date | string
    user_id?: IntFilter<"ingresos_futuros"> | number
    activo?: BoolFilter<"ingresos_futuros"> | boolean
  }

  export type usersCreateWithoutClientesInput = {
    email: string
    password: string
    activo: number
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutUsersInput
    typesusers: typesusersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutClientesInput = {
    user_id?: number
    email: string
    password: string
    typeuser_id: number
    activo: number
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutClientesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
  }

  export type usersUpsertWithoutClientesInput = {
    update: XOR<usersUpdateWithoutClientesInput, usersUncheckedUpdateWithoutClientesInput>
    create: XOR<usersCreateWithoutClientesInput, usersUncheckedCreateWithoutClientesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutClientesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutClientesInput, usersUncheckedUpdateWithoutClientesInput>
  }

  export type usersUpdateWithoutClientesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutUsersNestedInput
    typesusers?: typesusersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutClientesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    typeuser_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type categoriasCreateWithoutEgresos_futurosInput = {
    categoria: string
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutCategoriasInput
  }

  export type categoriasUncheckedCreateWithoutEgresos_futurosInput = {
    categoria_id?: number
    categoria: string
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutCategoriasInput
  }

  export type categoriasCreateOrConnectWithoutEgresos_futurosInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutEgresos_futurosInput, categoriasUncheckedCreateWithoutEgresos_futurosInput>
  }

  export type tipos_pagosCreateWithoutEgresos_futurosInput = {
    tipo_pago: string
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutTipos_pagosInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosUncheckedCreateWithoutEgresos_futurosInput = {
    tipo_pago_id?: number
    tipo_pago: string
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutTipos_pagosInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosCreateOrConnectWithoutEgresos_futurosInput = {
    where: tipos_pagosWhereUniqueInput
    create: XOR<tipos_pagosCreateWithoutEgresos_futurosInput, tipos_pagosUncheckedCreateWithoutEgresos_futurosInput>
  }

  export type usersCreateWithoutEgresos_futurosInput = {
    email: string
    password: string
    activo: number
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutUsersInput
    clientes?: clientesCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutUsersInput
    typesusers: typesusersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutEgresos_futurosInput = {
    user_id?: number
    email: string
    password: string
    typeuser_id: number
    activo: number
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutUsersInput
    clientes?: clientesUncheckedCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutEgresos_futurosInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutEgresos_futurosInput, usersUncheckedCreateWithoutEgresos_futurosInput>
  }

  export type categoriasUpsertWithoutEgresos_futurosInput = {
    update: XOR<categoriasUpdateWithoutEgresos_futurosInput, categoriasUncheckedUpdateWithoutEgresos_futurosInput>
    create: XOR<categoriasCreateWithoutEgresos_futurosInput, categoriasUncheckedCreateWithoutEgresos_futurosInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutEgresos_futurosInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutEgresos_futurosInput, categoriasUncheckedUpdateWithoutEgresos_futurosInput>
  }

  export type categoriasUpdateWithoutEgresos_futurosInput = {
    categoria?: StringFieldUpdateOperationsInput | string
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutCategoriasNestedInput
  }

  export type categoriasUncheckedUpdateWithoutEgresos_futurosInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutCategoriasNestedInput
  }

  export type tipos_pagosUpsertWithoutEgresos_futurosInput = {
    update: XOR<tipos_pagosUpdateWithoutEgresos_futurosInput, tipos_pagosUncheckedUpdateWithoutEgresos_futurosInput>
    create: XOR<tipos_pagosCreateWithoutEgresos_futurosInput, tipos_pagosUncheckedCreateWithoutEgresos_futurosInput>
    where?: tipos_pagosWhereInput
  }

  export type tipos_pagosUpdateToOneWithWhereWithoutEgresos_futurosInput = {
    where?: tipos_pagosWhereInput
    data: XOR<tipos_pagosUpdateWithoutEgresos_futurosInput, tipos_pagosUncheckedUpdateWithoutEgresos_futurosInput>
  }

  export type tipos_pagosUpdateWithoutEgresos_futurosInput = {
    tipo_pago?: StringFieldUpdateOperationsInput | string
    cajas_bancos?: cajas_bancosUpdateManyWithoutTipos_pagosNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutTipos_pagosNestedInput
  }

  export type tipos_pagosUncheckedUpdateWithoutEgresos_futurosInput = {
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    tipo_pago?: StringFieldUpdateOperationsInput | string
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutTipos_pagosNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput
  }

  export type usersUpsertWithoutEgresos_futurosInput = {
    update: XOR<usersUpdateWithoutEgresos_futurosInput, usersUncheckedUpdateWithoutEgresos_futurosInput>
    create: XOR<usersCreateWithoutEgresos_futurosInput, usersUncheckedCreateWithoutEgresos_futurosInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutEgresos_futurosInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutEgresos_futurosInput, usersUncheckedUpdateWithoutEgresos_futurosInput>
  }

  export type usersUpdateWithoutEgresos_futurosInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUpdateManyWithoutUsersNestedInput
    clientes?: clientesUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutUsersNestedInput
    typesusers?: typesusersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutEgresos_futurosInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    typeuser_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutUsersNestedInput
    clientes?: clientesUncheckedUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type categoriasCreateWithoutIngresos_futurosInput = {
    categoria: string
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutCategoriasInput
  }

  export type categoriasUncheckedCreateWithoutIngresos_futurosInput = {
    categoria_id?: number
    categoria: string
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutCategoriasInput
  }

  export type categoriasCreateOrConnectWithoutIngresos_futurosInput = {
    where: categoriasWhereUniqueInput
    create: XOR<categoriasCreateWithoutIngresos_futurosInput, categoriasUncheckedCreateWithoutIngresos_futurosInput>
  }

  export type tipos_pagosCreateWithoutIngresos_futurosInput = {
    tipo_pago: string
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutTipos_pagosInput
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosUncheckedCreateWithoutIngresos_futurosInput = {
    tipo_pago_id?: number
    tipo_pago: string
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutTipos_pagosInput
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutTipos_pagosInput
  }

  export type tipos_pagosCreateOrConnectWithoutIngresos_futurosInput = {
    where: tipos_pagosWhereUniqueInput
    create: XOR<tipos_pagosCreateWithoutIngresos_futurosInput, tipos_pagosUncheckedCreateWithoutIngresos_futurosInput>
  }

  export type usersCreateWithoutIngresos_futurosInput = {
    email: string
    password: string
    activo: number
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutUsersInput
    clientes?: clientesCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutUsersInput
    typesusers: typesusersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutIngresos_futurosInput = {
    user_id?: number
    email: string
    password: string
    typeuser_id: number
    activo: number
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutUsersInput
    clientes?: clientesUncheckedCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutIngresos_futurosInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutIngresos_futurosInput, usersUncheckedCreateWithoutIngresos_futurosInput>
  }

  export type categoriasUpsertWithoutIngresos_futurosInput = {
    update: XOR<categoriasUpdateWithoutIngresos_futurosInput, categoriasUncheckedUpdateWithoutIngresos_futurosInput>
    create: XOR<categoriasCreateWithoutIngresos_futurosInput, categoriasUncheckedCreateWithoutIngresos_futurosInput>
    where?: categoriasWhereInput
  }

  export type categoriasUpdateToOneWithWhereWithoutIngresos_futurosInput = {
    where?: categoriasWhereInput
    data: XOR<categoriasUpdateWithoutIngresos_futurosInput, categoriasUncheckedUpdateWithoutIngresos_futurosInput>
  }

  export type categoriasUpdateWithoutIngresos_futurosInput = {
    categoria?: StringFieldUpdateOperationsInput | string
    egresos_futuros?: egresos_futurosUpdateManyWithoutCategoriasNestedInput
  }

  export type categoriasUncheckedUpdateWithoutIngresos_futurosInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutCategoriasNestedInput
  }

  export type tipos_pagosUpsertWithoutIngresos_futurosInput = {
    update: XOR<tipos_pagosUpdateWithoutIngresos_futurosInput, tipos_pagosUncheckedUpdateWithoutIngresos_futurosInput>
    create: XOR<tipos_pagosCreateWithoutIngresos_futurosInput, tipos_pagosUncheckedCreateWithoutIngresos_futurosInput>
    where?: tipos_pagosWhereInput
  }

  export type tipos_pagosUpdateToOneWithWhereWithoutIngresos_futurosInput = {
    where?: tipos_pagosWhereInput
    data: XOR<tipos_pagosUpdateWithoutIngresos_futurosInput, tipos_pagosUncheckedUpdateWithoutIngresos_futurosInput>
  }

  export type tipos_pagosUpdateWithoutIngresos_futurosInput = {
    tipo_pago?: StringFieldUpdateOperationsInput | string
    cajas_bancos?: cajas_bancosUpdateManyWithoutTipos_pagosNestedInput
    egresos_futuros?: egresos_futurosUpdateManyWithoutTipos_pagosNestedInput
  }

  export type tipos_pagosUncheckedUpdateWithoutIngresos_futurosInput = {
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    tipo_pago?: StringFieldUpdateOperationsInput | string
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutTipos_pagosNestedInput
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutTipos_pagosNestedInput
  }

  export type usersUpsertWithoutIngresos_futurosInput = {
    update: XOR<usersUpdateWithoutIngresos_futurosInput, usersUncheckedUpdateWithoutIngresos_futurosInput>
    create: XOR<usersCreateWithoutIngresos_futurosInput, usersUncheckedCreateWithoutIngresos_futurosInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutIngresos_futurosInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutIngresos_futurosInput, usersUncheckedUpdateWithoutIngresos_futurosInput>
  }

  export type usersUpdateWithoutIngresos_futurosInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUpdateManyWithoutUsersNestedInput
    clientes?: clientesUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUpdateManyWithoutUsersNestedInput
    typesusers?: typesusersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutIngresos_futurosInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    typeuser_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutUsersNestedInput
    clientes?: clientesUncheckedUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type cajas_bancosCreateWithoutTipos_pagosInput = {
    nombre_cuenta: string
    cantidad_actual: number
    activo: number
    users: usersCreateNestedOneWithoutCajas_bancosInput
  }

  export type cajas_bancosUncheckedCreateWithoutTipos_pagosInput = {
    cajas_bancos_id?: number
    nombre_cuenta: string
    cantidad_actual: number
    user_id: number
    activo: number
  }

  export type cajas_bancosCreateOrConnectWithoutTipos_pagosInput = {
    where: cajas_bancosWhereUniqueInput
    create: XOR<cajas_bancosCreateWithoutTipos_pagosInput, cajas_bancosUncheckedCreateWithoutTipos_pagosInput>
  }

  export type cajas_bancosCreateManyTipos_pagosInputEnvelope = {
    data: cajas_bancosCreateManyTipos_pagosInput | cajas_bancosCreateManyTipos_pagosInput[]
    skipDuplicates?: boolean
  }

  export type egresos_futurosCreateWithoutTipos_pagosInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_pago: Date | string
    activo: boolean
    categorias: categoriasCreateNestedOneWithoutEgresos_futurosInput
    users: usersCreateNestedOneWithoutEgresos_futurosInput
  }

  export type egresos_futurosUncheckedCreateWithoutTipos_pagosInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    user_id: number
    activo: boolean
  }

  export type egresos_futurosCreateOrConnectWithoutTipos_pagosInput = {
    where: egresos_futurosWhereUniqueInput
    create: XOR<egresos_futurosCreateWithoutTipos_pagosInput, egresos_futurosUncheckedCreateWithoutTipos_pagosInput>
  }

  export type egresos_futurosCreateManyTipos_pagosInputEnvelope = {
    data: egresos_futurosCreateManyTipos_pagosInput | egresos_futurosCreateManyTipos_pagosInput[]
    skipDuplicates?: boolean
  }

  export type ingresos_futurosCreateWithoutTipos_pagosInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_cobro: Date | string
    activo: boolean
    categorias: categoriasCreateNestedOneWithoutIngresos_futurosInput
    users: usersCreateNestedOneWithoutIngresos_futurosInput
  }

  export type ingresos_futurosUncheckedCreateWithoutTipos_pagosInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    user_id: number
    activo: boolean
  }

  export type ingresos_futurosCreateOrConnectWithoutTipos_pagosInput = {
    where: ingresos_futurosWhereUniqueInput
    create: XOR<ingresos_futurosCreateWithoutTipos_pagosInput, ingresos_futurosUncheckedCreateWithoutTipos_pagosInput>
  }

  export type ingresos_futurosCreateManyTipos_pagosInputEnvelope = {
    data: ingresos_futurosCreateManyTipos_pagosInput | ingresos_futurosCreateManyTipos_pagosInput[]
    skipDuplicates?: boolean
  }

  export type cajas_bancosUpsertWithWhereUniqueWithoutTipos_pagosInput = {
    where: cajas_bancosWhereUniqueInput
    update: XOR<cajas_bancosUpdateWithoutTipos_pagosInput, cajas_bancosUncheckedUpdateWithoutTipos_pagosInput>
    create: XOR<cajas_bancosCreateWithoutTipos_pagosInput, cajas_bancosUncheckedCreateWithoutTipos_pagosInput>
  }

  export type cajas_bancosUpdateWithWhereUniqueWithoutTipos_pagosInput = {
    where: cajas_bancosWhereUniqueInput
    data: XOR<cajas_bancosUpdateWithoutTipos_pagosInput, cajas_bancosUncheckedUpdateWithoutTipos_pagosInput>
  }

  export type cajas_bancosUpdateManyWithWhereWithoutTipos_pagosInput = {
    where: cajas_bancosScalarWhereInput
    data: XOR<cajas_bancosUpdateManyMutationInput, cajas_bancosUncheckedUpdateManyWithoutTipos_pagosInput>
  }

  export type cajas_bancosScalarWhereInput = {
    AND?: cajas_bancosScalarWhereInput | cajas_bancosScalarWhereInput[]
    OR?: cajas_bancosScalarWhereInput[]
    NOT?: cajas_bancosScalarWhereInput | cajas_bancosScalarWhereInput[]
    cajas_bancos_id?: IntFilter<"cajas_bancos"> | number
    nombre_cuenta?: StringFilter<"cajas_bancos"> | string
    tipo_pago_id?: IntFilter<"cajas_bancos"> | number
    cantidad_actual?: IntFilter<"cajas_bancos"> | number
    user_id?: IntFilter<"cajas_bancos"> | number
    activo?: IntFilter<"cajas_bancos"> | number
  }

  export type egresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput = {
    where: egresos_futurosWhereUniqueInput
    update: XOR<egresos_futurosUpdateWithoutTipos_pagosInput, egresos_futurosUncheckedUpdateWithoutTipos_pagosInput>
    create: XOR<egresos_futurosCreateWithoutTipos_pagosInput, egresos_futurosUncheckedCreateWithoutTipos_pagosInput>
  }

  export type egresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput = {
    where: egresos_futurosWhereUniqueInput
    data: XOR<egresos_futurosUpdateWithoutTipos_pagosInput, egresos_futurosUncheckedUpdateWithoutTipos_pagosInput>
  }

  export type egresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput = {
    where: egresos_futurosScalarWhereInput
    data: XOR<egresos_futurosUpdateManyMutationInput, egresos_futurosUncheckedUpdateManyWithoutTipos_pagosInput>
  }

  export type ingresos_futurosUpsertWithWhereUniqueWithoutTipos_pagosInput = {
    where: ingresos_futurosWhereUniqueInput
    update: XOR<ingresos_futurosUpdateWithoutTipos_pagosInput, ingresos_futurosUncheckedUpdateWithoutTipos_pagosInput>
    create: XOR<ingresos_futurosCreateWithoutTipos_pagosInput, ingresos_futurosUncheckedCreateWithoutTipos_pagosInput>
  }

  export type ingresos_futurosUpdateWithWhereUniqueWithoutTipos_pagosInput = {
    where: ingresos_futurosWhereUniqueInput
    data: XOR<ingresos_futurosUpdateWithoutTipos_pagosInput, ingresos_futurosUncheckedUpdateWithoutTipos_pagosInput>
  }

  export type ingresos_futurosUpdateManyWithWhereWithoutTipos_pagosInput = {
    where: ingresos_futurosScalarWhereInput
    data: XOR<ingresos_futurosUpdateManyMutationInput, ingresos_futurosUncheckedUpdateManyWithoutTipos_pagosInput>
  }

  export type usersCreateWithoutTypesusersInput = {
    email: string
    password: string
    activo: number
    cajas_bancos?: cajas_bancosCreateNestedManyWithoutUsersInput
    clientes?: clientesCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutTypesusersInput = {
    user_id?: number
    email: string
    password: string
    activo: number
    cajas_bancos?: cajas_bancosUncheckedCreateNestedManyWithoutUsersInput
    clientes?: clientesUncheckedCreateNestedManyWithoutUsersInput
    egresos_futuros?: egresos_futurosUncheckedCreateNestedManyWithoutUsersInput
    ingresos_futuros?: ingresos_futurosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutTypesusersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput>
  }

  export type usersCreateManyTypesusersInputEnvelope = {
    data: usersCreateManyTypesusersInput | usersCreateManyTypesusersInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithWhereUniqueWithoutTypesusersInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutTypesusersInput, usersUncheckedUpdateWithoutTypesusersInput>
    create: XOR<usersCreateWithoutTypesusersInput, usersUncheckedCreateWithoutTypesusersInput>
  }

  export type usersUpdateWithWhereUniqueWithoutTypesusersInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutTypesusersInput, usersUncheckedUpdateWithoutTypesusersInput>
  }

  export type usersUpdateManyWithWhereWithoutTypesusersInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutTypesusersInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    user_id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    typeuser_id?: IntFilter<"users"> | number
    activo?: IntFilter<"users"> | number
  }

  export type cajas_bancosCreateWithoutUsersInput = {
    nombre_cuenta: string
    cantidad_actual: number
    activo: number
    tipos_pagos: tipos_pagosCreateNestedOneWithoutCajas_bancosInput
  }

  export type cajas_bancosUncheckedCreateWithoutUsersInput = {
    cajas_bancos_id?: number
    nombre_cuenta: string
    tipo_pago_id: number
    cantidad_actual: number
    activo: number
  }

  export type cajas_bancosCreateOrConnectWithoutUsersInput = {
    where: cajas_bancosWhereUniqueInput
    create: XOR<cajas_bancosCreateWithoutUsersInput, cajas_bancosUncheckedCreateWithoutUsersInput>
  }

  export type cajas_bancosCreateManyUsersInputEnvelope = {
    data: cajas_bancosCreateManyUsersInput | cajas_bancosCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type clientesCreateWithoutUsersInput = {
    nombre: string
    apellido: string
    puesto: string
    celular?: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date | string
    activo: number
  }

  export type clientesUncheckedCreateWithoutUsersInput = {
    cliente_id?: number
    nombre: string
    apellido: string
    puesto: string
    celular?: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date | string
    activo: number
  }

  export type clientesCreateOrConnectWithoutUsersInput = {
    where: clientesWhereUniqueInput
    create: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput>
  }

  export type clientesCreateManyUsersInputEnvelope = {
    data: clientesCreateManyUsersInput | clientesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type egresos_futurosCreateWithoutUsersInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_pago: Date | string
    activo: boolean
    categorias: categoriasCreateNestedOneWithoutEgresos_futurosInput
    tipos_pagos: tipos_pagosCreateNestedOneWithoutEgresos_futurosInput
  }

  export type egresos_futurosUncheckedCreateWithoutUsersInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    activo: boolean
  }

  export type egresos_futurosCreateOrConnectWithoutUsersInput = {
    where: egresos_futurosWhereUniqueInput
    create: XOR<egresos_futurosCreateWithoutUsersInput, egresos_futurosUncheckedCreateWithoutUsersInput>
  }

  export type egresos_futurosCreateManyUsersInputEnvelope = {
    data: egresos_futurosCreateManyUsersInput | egresos_futurosCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ingresos_futurosCreateWithoutUsersInput = {
    nombre_persona_empresa: string
    concepto: string
    monto: number
    fecha_tentativa_cobro: Date | string
    activo: boolean
    categorias: categoriasCreateNestedOneWithoutIngresos_futurosInput
    tipos_pagos: tipos_pagosCreateNestedOneWithoutIngresos_futurosInput
  }

  export type ingresos_futurosUncheckedCreateWithoutUsersInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    activo: boolean
  }

  export type ingresos_futurosCreateOrConnectWithoutUsersInput = {
    where: ingresos_futurosWhereUniqueInput
    create: XOR<ingresos_futurosCreateWithoutUsersInput, ingresos_futurosUncheckedCreateWithoutUsersInput>
  }

  export type ingresos_futurosCreateManyUsersInputEnvelope = {
    data: ingresos_futurosCreateManyUsersInput | ingresos_futurosCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type typesusersCreateWithoutUsersInput = {
    typeuser: string
  }

  export type typesusersUncheckedCreateWithoutUsersInput = {
    typeuser_id?: number
    typeuser: string
  }

  export type typesusersCreateOrConnectWithoutUsersInput = {
    where: typesusersWhereUniqueInput
    create: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
  }

  export type cajas_bancosUpsertWithWhereUniqueWithoutUsersInput = {
    where: cajas_bancosWhereUniqueInput
    update: XOR<cajas_bancosUpdateWithoutUsersInput, cajas_bancosUncheckedUpdateWithoutUsersInput>
    create: XOR<cajas_bancosCreateWithoutUsersInput, cajas_bancosUncheckedCreateWithoutUsersInput>
  }

  export type cajas_bancosUpdateWithWhereUniqueWithoutUsersInput = {
    where: cajas_bancosWhereUniqueInput
    data: XOR<cajas_bancosUpdateWithoutUsersInput, cajas_bancosUncheckedUpdateWithoutUsersInput>
  }

  export type cajas_bancosUpdateManyWithWhereWithoutUsersInput = {
    where: cajas_bancosScalarWhereInput
    data: XOR<cajas_bancosUpdateManyMutationInput, cajas_bancosUncheckedUpdateManyWithoutUsersInput>
  }

  export type clientesUpsertWithWhereUniqueWithoutUsersInput = {
    where: clientesWhereUniqueInput
    update: XOR<clientesUpdateWithoutUsersInput, clientesUncheckedUpdateWithoutUsersInput>
    create: XOR<clientesCreateWithoutUsersInput, clientesUncheckedCreateWithoutUsersInput>
  }

  export type clientesUpdateWithWhereUniqueWithoutUsersInput = {
    where: clientesWhereUniqueInput
    data: XOR<clientesUpdateWithoutUsersInput, clientesUncheckedUpdateWithoutUsersInput>
  }

  export type clientesUpdateManyWithWhereWithoutUsersInput = {
    where: clientesScalarWhereInput
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyWithoutUsersInput>
  }

  export type clientesScalarWhereInput = {
    AND?: clientesScalarWhereInput | clientesScalarWhereInput[]
    OR?: clientesScalarWhereInput[]
    NOT?: clientesScalarWhereInput | clientesScalarWhereInput[]
    cliente_id?: IntFilter<"clientes"> | number
    nombre?: StringFilter<"clientes"> | string
    apellido?: StringFilter<"clientes"> | string
    puesto?: StringFilter<"clientes"> | string
    celular?: StringNullableFilter<"clientes"> | string | null
    empresa?: StringFilter<"clientes"> | string
    dedica_empresa?: StringFilter<"clientes"> | string
    num_empleados?: IntFilter<"clientes"> | number
    fecha?: DateTimeFilter<"clientes"> | Date | string
    user_id?: IntFilter<"clientes"> | number
    activo?: IntFilter<"clientes"> | number
  }

  export type egresos_futurosUpsertWithWhereUniqueWithoutUsersInput = {
    where: egresos_futurosWhereUniqueInput
    update: XOR<egresos_futurosUpdateWithoutUsersInput, egresos_futurosUncheckedUpdateWithoutUsersInput>
    create: XOR<egresos_futurosCreateWithoutUsersInput, egresos_futurosUncheckedCreateWithoutUsersInput>
  }

  export type egresos_futurosUpdateWithWhereUniqueWithoutUsersInput = {
    where: egresos_futurosWhereUniqueInput
    data: XOR<egresos_futurosUpdateWithoutUsersInput, egresos_futurosUncheckedUpdateWithoutUsersInput>
  }

  export type egresos_futurosUpdateManyWithWhereWithoutUsersInput = {
    where: egresos_futurosScalarWhereInput
    data: XOR<egresos_futurosUpdateManyMutationInput, egresos_futurosUncheckedUpdateManyWithoutUsersInput>
  }

  export type ingresos_futurosUpsertWithWhereUniqueWithoutUsersInput = {
    where: ingresos_futurosWhereUniqueInput
    update: XOR<ingresos_futurosUpdateWithoutUsersInput, ingresos_futurosUncheckedUpdateWithoutUsersInput>
    create: XOR<ingresos_futurosCreateWithoutUsersInput, ingresos_futurosUncheckedCreateWithoutUsersInput>
  }

  export type ingresos_futurosUpdateWithWhereUniqueWithoutUsersInput = {
    where: ingresos_futurosWhereUniqueInput
    data: XOR<ingresos_futurosUpdateWithoutUsersInput, ingresos_futurosUncheckedUpdateWithoutUsersInput>
  }

  export type ingresos_futurosUpdateManyWithWhereWithoutUsersInput = {
    where: ingresos_futurosScalarWhereInput
    data: XOR<ingresos_futurosUpdateManyMutationInput, ingresos_futurosUncheckedUpdateManyWithoutUsersInput>
  }

  export type typesusersUpsertWithoutUsersInput = {
    update: XOR<typesusersUpdateWithoutUsersInput, typesusersUncheckedUpdateWithoutUsersInput>
    create: XOR<typesusersCreateWithoutUsersInput, typesusersUncheckedCreateWithoutUsersInput>
    where?: typesusersWhereInput
  }

  export type typesusersUpdateToOneWithWhereWithoutUsersInput = {
    where?: typesusersWhereInput
    data: XOR<typesusersUpdateWithoutUsersInput, typesusersUncheckedUpdateWithoutUsersInput>
  }

  export type typesusersUpdateWithoutUsersInput = {
    typeuser?: StringFieldUpdateOperationsInput | string
  }

  export type typesusersUncheckedUpdateWithoutUsersInput = {
    typeuser_id?: IntFieldUpdateOperationsInput | number
    typeuser?: StringFieldUpdateOperationsInput | string
  }

  export type egresos_futurosCreateManyCategoriasInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    user_id: number
    activo: boolean
  }

  export type ingresos_futurosCreateManyCategoriasInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    user_id: number
    activo: boolean
  }

  export type egresos_futurosUpdateWithoutCategoriasInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutEgresos_futurosNestedInput
    users?: usersUpdateOneRequiredWithoutEgresos_futurosNestedInput
  }

  export type egresos_futurosUncheckedUpdateWithoutCategoriasInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type egresos_futurosUncheckedUpdateManyWithoutCategoriasInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosUpdateWithoutCategoriasInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutIngresos_futurosNestedInput
    users?: usersUpdateOneRequiredWithoutIngresos_futurosNestedInput
  }

  export type ingresos_futurosUncheckedUpdateWithoutCategoriasInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosUncheckedUpdateManyWithoutCategoriasInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cajas_bancosCreateManyTipos_pagosInput = {
    cajas_bancos_id?: number
    nombre_cuenta: string
    cantidad_actual: number
    user_id: number
    activo: number
  }

  export type egresos_futurosCreateManyTipos_pagosInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    user_id: number
    activo: boolean
  }

  export type ingresos_futurosCreateManyTipos_pagosInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    user_id: number
    activo: boolean
  }

  export type cajas_bancosUpdateWithoutTipos_pagosInput = {
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    users?: usersUpdateOneRequiredWithoutCajas_bancosNestedInput
  }

  export type cajas_bancosUncheckedUpdateWithoutTipos_pagosInput = {
    cajas_bancos_id?: IntFieldUpdateOperationsInput | number
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type cajas_bancosUncheckedUpdateManyWithoutTipos_pagosInput = {
    cajas_bancos_id?: IntFieldUpdateOperationsInput | number
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type egresos_futurosUpdateWithoutTipos_pagosInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateOneRequiredWithoutEgresos_futurosNestedInput
    users?: usersUpdateOneRequiredWithoutEgresos_futurosNestedInput
  }

  export type egresos_futurosUncheckedUpdateWithoutTipos_pagosInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type egresos_futurosUncheckedUpdateManyWithoutTipos_pagosInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosUpdateWithoutTipos_pagosInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateOneRequiredWithoutIngresos_futurosNestedInput
    users?: usersUpdateOneRequiredWithoutIngresos_futurosNestedInput
  }

  export type ingresos_futurosUncheckedUpdateWithoutTipos_pagosInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosUncheckedUpdateManyWithoutTipos_pagosInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersCreateManyTypesusersInput = {
    user_id?: number
    email: string
    password: string
    activo: number
  }

  export type usersUpdateWithoutTypesusersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUpdateManyWithoutUsersNestedInput
    clientes?: clientesUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutTypesusersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
    cajas_bancos?: cajas_bancosUncheckedUpdateManyWithoutUsersNestedInput
    clientes?: clientesUncheckedUpdateManyWithoutUsersNestedInput
    egresos_futuros?: egresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
    ingresos_futuros?: ingresos_futurosUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateManyWithoutTypesusersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type cajas_bancosCreateManyUsersInput = {
    cajas_bancos_id?: number
    nombre_cuenta: string
    tipo_pago_id: number
    cantidad_actual: number
    activo: number
  }

  export type clientesCreateManyUsersInput = {
    cliente_id?: number
    nombre: string
    apellido: string
    puesto: string
    celular?: string | null
    empresa: string
    dedica_empresa: string
    num_empleados: number
    fecha: Date | string
    activo: number
  }

  export type egresos_futurosCreateManyUsersInput = {
    egresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_pago: Date | string
    activo: boolean
  }

  export type ingresos_futurosCreateManyUsersInput = {
    ingresos_futuros_id?: number
    nombre_persona_empresa: string
    concepto: string
    tipo_pago_id: number
    categoria_id: number
    monto: number
    fecha_tentativa_cobro: Date | string
    activo: boolean
  }

  export type cajas_bancosUpdateWithoutUsersInput = {
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutCajas_bancosNestedInput
  }

  export type cajas_bancosUncheckedUpdateWithoutUsersInput = {
    cajas_bancos_id?: IntFieldUpdateOperationsInput | number
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type cajas_bancosUncheckedUpdateManyWithoutUsersInput = {
    cajas_bancos_id?: IntFieldUpdateOperationsInput | number
    nombre_cuenta?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    cantidad_actual?: IntFieldUpdateOperationsInput | number
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type clientesUpdateWithoutUsersInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    puesto?: StringFieldUpdateOperationsInput | string
    celular?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: StringFieldUpdateOperationsInput | string
    dedica_empresa?: StringFieldUpdateOperationsInput | string
    num_empleados?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type clientesUncheckedUpdateWithoutUsersInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    puesto?: StringFieldUpdateOperationsInput | string
    celular?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: StringFieldUpdateOperationsInput | string
    dedica_empresa?: StringFieldUpdateOperationsInput | string
    num_empleados?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type clientesUncheckedUpdateManyWithoutUsersInput = {
    cliente_id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    puesto?: StringFieldUpdateOperationsInput | string
    celular?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: StringFieldUpdateOperationsInput | string
    dedica_empresa?: StringFieldUpdateOperationsInput | string
    num_empleados?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: IntFieldUpdateOperationsInput | number
  }

  export type egresos_futurosUpdateWithoutUsersInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateOneRequiredWithoutEgresos_futurosNestedInput
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutEgresos_futurosNestedInput
  }

  export type egresos_futurosUncheckedUpdateWithoutUsersInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type egresos_futurosUncheckedUpdateManyWithoutUsersInput = {
    egresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_pago?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosUpdateWithoutUsersInput = {
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    categorias?: categoriasUpdateOneRequiredWithoutIngresos_futurosNestedInput
    tipos_pagos?: tipos_pagosUpdateOneRequiredWithoutIngresos_futurosNestedInput
  }

  export type ingresos_futurosUncheckedUpdateWithoutUsersInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ingresos_futurosUncheckedUpdateManyWithoutUsersInput = {
    ingresos_futuros_id?: IntFieldUpdateOperationsInput | number
    nombre_persona_empresa?: StringFieldUpdateOperationsInput | string
    concepto?: StringFieldUpdateOperationsInput | string
    tipo_pago_id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    monto?: IntFieldUpdateOperationsInput | number
    fecha_tentativa_cobro?: DateTimeFieldUpdateOperationsInput | Date | string
    activo?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}